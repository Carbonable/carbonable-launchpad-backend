// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/carbonable/carbonable-launchpad-backend/ent/mint"
	"github.com/carbonable/carbonable-launchpad-backend/ent/predicate"
	"github.com/carbonable/carbonable-launchpad-backend/ent/project"
)

// MintUpdate is the builder for updating Mint entities.
type MintUpdate struct {
	config
	hooks    []Hook
	mutation *MintMutation
}

// Where appends a list predicates to the MintUpdate builder.
func (mu *MintUpdate) Where(ps ...predicate.Mint) *MintUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetMinValuePerTx sets the "min_value_per_tx" field.
func (mu *MintUpdate) SetMinValuePerTx(s string) *MintUpdate {
	mu.mutation.SetMinValuePerTx(s)
	return mu
}

// SetNillableMinValuePerTx sets the "min_value_per_tx" field if the given value is not nil.
func (mu *MintUpdate) SetNillableMinValuePerTx(s *string) *MintUpdate {
	if s != nil {
		mu.SetMinValuePerTx(*s)
	}
	return mu
}

// SetMaxValuePerTx sets the "max_value_per_tx" field.
func (mu *MintUpdate) SetMaxValuePerTx(s string) *MintUpdate {
	mu.mutation.SetMaxValuePerTx(s)
	return mu
}

// SetNillableMaxValuePerTx sets the "max_value_per_tx" field if the given value is not nil.
func (mu *MintUpdate) SetNillableMaxValuePerTx(s *string) *MintUpdate {
	if s != nil {
		mu.SetMaxValuePerTx(*s)
	}
	return mu
}

// SetMinterAddress sets the "minter_address" field.
func (mu *MintUpdate) SetMinterAddress(s string) *MintUpdate {
	mu.mutation.SetMinterAddress(s)
	return mu
}

// SetNillableMinterAddress sets the "minter_address" field if the given value is not nil.
func (mu *MintUpdate) SetNillableMinterAddress(s *string) *MintUpdate {
	if s != nil {
		mu.SetMinterAddress(*s)
	}
	return mu
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (mu *MintUpdate) SetProjectID(id int) *MintUpdate {
	mu.mutation.SetProjectID(id)
	return mu
}

// SetProject sets the "project" edge to the Project entity.
func (mu *MintUpdate) SetProject(p *Project) *MintUpdate {
	return mu.SetProjectID(p.ID)
}

// Mutation returns the MintMutation object of the builder.
func (mu *MintUpdate) Mutation() *MintMutation {
	return mu.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (mu *MintUpdate) ClearProject() *MintUpdate {
	mu.mutation.ClearProject()
	return mu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MintUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MintUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MintUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MintUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MintUpdate) check() error {
	if _, ok := mu.mutation.ProjectID(); mu.mutation.ProjectCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Mint.project"`)
	}
	return nil
}

func (mu *MintUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(mint.Table, mint.Columns, sqlgraph.NewFieldSpec(mint.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.MinValuePerTx(); ok {
		_spec.SetField(mint.FieldMinValuePerTx, field.TypeString, value)
	}
	if value, ok := mu.mutation.MaxValuePerTx(); ok {
		_spec.SetField(mint.FieldMaxValuePerTx, field.TypeString, value)
	}
	if value, ok := mu.mutation.MinterAddress(); ok {
		_spec.SetField(mint.FieldMinterAddress, field.TypeString, value)
	}
	if mu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   mint.ProjectTable,
			Columns: []string{mint.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   mint.ProjectTable,
			Columns: []string{mint.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mint.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MintUpdateOne is the builder for updating a single Mint entity.
type MintUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MintMutation
}

// SetMinValuePerTx sets the "min_value_per_tx" field.
func (muo *MintUpdateOne) SetMinValuePerTx(s string) *MintUpdateOne {
	muo.mutation.SetMinValuePerTx(s)
	return muo
}

// SetNillableMinValuePerTx sets the "min_value_per_tx" field if the given value is not nil.
func (muo *MintUpdateOne) SetNillableMinValuePerTx(s *string) *MintUpdateOne {
	if s != nil {
		muo.SetMinValuePerTx(*s)
	}
	return muo
}

// SetMaxValuePerTx sets the "max_value_per_tx" field.
func (muo *MintUpdateOne) SetMaxValuePerTx(s string) *MintUpdateOne {
	muo.mutation.SetMaxValuePerTx(s)
	return muo
}

// SetNillableMaxValuePerTx sets the "max_value_per_tx" field if the given value is not nil.
func (muo *MintUpdateOne) SetNillableMaxValuePerTx(s *string) *MintUpdateOne {
	if s != nil {
		muo.SetMaxValuePerTx(*s)
	}
	return muo
}

// SetMinterAddress sets the "minter_address" field.
func (muo *MintUpdateOne) SetMinterAddress(s string) *MintUpdateOne {
	muo.mutation.SetMinterAddress(s)
	return muo
}

// SetNillableMinterAddress sets the "minter_address" field if the given value is not nil.
func (muo *MintUpdateOne) SetNillableMinterAddress(s *string) *MintUpdateOne {
	if s != nil {
		muo.SetMinterAddress(*s)
	}
	return muo
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (muo *MintUpdateOne) SetProjectID(id int) *MintUpdateOne {
	muo.mutation.SetProjectID(id)
	return muo
}

// SetProject sets the "project" edge to the Project entity.
func (muo *MintUpdateOne) SetProject(p *Project) *MintUpdateOne {
	return muo.SetProjectID(p.ID)
}

// Mutation returns the MintMutation object of the builder.
func (muo *MintUpdateOne) Mutation() *MintMutation {
	return muo.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (muo *MintUpdateOne) ClearProject() *MintUpdateOne {
	muo.mutation.ClearProject()
	return muo
}

// Where appends a list predicates to the MintUpdate builder.
func (muo *MintUpdateOne) Where(ps ...predicate.Mint) *MintUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MintUpdateOne) Select(field string, fields ...string) *MintUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Mint entity.
func (muo *MintUpdateOne) Save(ctx context.Context) (*Mint, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MintUpdateOne) SaveX(ctx context.Context) *Mint {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MintUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MintUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MintUpdateOne) check() error {
	if _, ok := muo.mutation.ProjectID(); muo.mutation.ProjectCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Mint.project"`)
	}
	return nil
}

func (muo *MintUpdateOne) sqlSave(ctx context.Context) (_node *Mint, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(mint.Table, mint.Columns, sqlgraph.NewFieldSpec(mint.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Mint.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mint.FieldID)
		for _, f := range fields {
			if !mint.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != mint.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.MinValuePerTx(); ok {
		_spec.SetField(mint.FieldMinValuePerTx, field.TypeString, value)
	}
	if value, ok := muo.mutation.MaxValuePerTx(); ok {
		_spec.SetField(mint.FieldMaxValuePerTx, field.TypeString, value)
	}
	if value, ok := muo.mutation.MinterAddress(); ok {
		_spec.SetField(mint.FieldMinterAddress, field.TypeString, value)
	}
	if muo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   mint.ProjectTable,
			Columns: []string{mint.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   mint.ProjectTable,
			Columns: []string{mint.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Mint{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mint.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
