// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/carbonable/carbonable-launchpad-backend/ent/launchpad"
	"github.com/carbonable/carbonable-launchpad-backend/ent/mint"
	"github.com/carbonable/carbonable-launchpad-backend/ent/project"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (l *LaunchpadQuery) CollectFields(ctx context.Context, satisfies ...string) (*LaunchpadQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return l, nil
	}
	if err := l.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return l, nil
}

func (l *LaunchpadQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(launchpad.Columns))
		selectedFields = []string{launchpad.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "project":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ProjectClient{config: l.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, projectImplementors)...); err != nil {
				return err
			}
			l.withProject = query
		case "isReady":
			if _, ok := fieldSeen[launchpad.FieldIsReady]; !ok {
				selectedFields = append(selectedFields, launchpad.FieldIsReady)
				fieldSeen[launchpad.FieldIsReady] = struct{}{}
			}
		case "minterContract":
			if _, ok := fieldSeen[launchpad.FieldMinterContract]; !ok {
				selectedFields = append(selectedFields, launchpad.FieldMinterContract)
				fieldSeen[launchpad.FieldMinterContract] = struct{}{}
			}
		case "whitelistedSaleOpen":
			if _, ok := fieldSeen[launchpad.FieldWhitelistedSaleOpen]; !ok {
				selectedFields = append(selectedFields, launchpad.FieldWhitelistedSaleOpen)
				fieldSeen[launchpad.FieldWhitelistedSaleOpen] = struct{}{}
			}
		case "publicSaleOpen":
			if _, ok := fieldSeen[launchpad.FieldPublicSaleOpen]; !ok {
				selectedFields = append(selectedFields, launchpad.FieldPublicSaleOpen)
				fieldSeen[launchpad.FieldPublicSaleOpen] = struct{}{}
			}
		case "isSoldOut":
			if _, ok := fieldSeen[launchpad.FieldIsSoldOut]; !ok {
				selectedFields = append(selectedFields, launchpad.FieldIsSoldOut)
				fieldSeen[launchpad.FieldIsSoldOut] = struct{}{}
			}
		case "isCanceled":
			if _, ok := fieldSeen[launchpad.FieldIsCanceled]; !ok {
				selectedFields = append(selectedFields, launchpad.FieldIsCanceled)
				fieldSeen[launchpad.FieldIsCanceled] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		l.Select(selectedFields...)
	}
	return nil
}

type launchpadPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []LaunchpadPaginateOption
}

func newLaunchpadPaginateArgs(rv map[string]any) *launchpadPaginateArgs {
	args := &launchpadPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (m *MintQuery) CollectFields(ctx context.Context, satisfies ...string) (*MintQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return m, nil
	}
	if err := m.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return m, nil
}

func (m *MintQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(mint.Columns))
		selectedFields = []string{mint.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "project":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ProjectClient{config: m.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, projectImplementors)...); err != nil {
				return err
			}
			m.withProject = query
		case "minValuePerTx":
			if _, ok := fieldSeen[mint.FieldMinValuePerTx]; !ok {
				selectedFields = append(selectedFields, mint.FieldMinValuePerTx)
				fieldSeen[mint.FieldMinValuePerTx] = struct{}{}
			}
		case "maxValuePerTx":
			if _, ok := fieldSeen[mint.FieldMaxValuePerTx]; !ok {
				selectedFields = append(selectedFields, mint.FieldMaxValuePerTx)
				fieldSeen[mint.FieldMaxValuePerTx] = struct{}{}
			}
		case "minterAddress":
			if _, ok := fieldSeen[mint.FieldMinterAddress]; !ok {
				selectedFields = append(selectedFields, mint.FieldMinterAddress)
				fieldSeen[mint.FieldMinterAddress] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		m.Select(selectedFields...)
	}
	return nil
}

type mintPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []MintPaginateOption
}

func newMintPaginateArgs(rv map[string]any) *mintPaginateArgs {
	args := &mintPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pr *ProjectQuery) CollectFields(ctx context.Context, satisfies ...string) (*ProjectQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return pr, nil
	}
	if err := pr.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return pr, nil
}

func (pr *ProjectQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(project.Columns))
		selectedFields = []string{project.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "mint":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&MintClient{config: pr.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, mintImplementors)...); err != nil {
				return err
			}
			pr.withMint = query

		case "launchpad":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&LaunchpadClient{config: pr.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, launchpadImplementors)...); err != nil {
				return err
			}
			pr.withLaunchpad = query
		case "address":
			if _, ok := fieldSeen[project.FieldAddress]; !ok {
				selectedFields = append(selectedFields, project.FieldAddress)
				fieldSeen[project.FieldAddress] = struct{}{}
			}
		case "slot":
			if _, ok := fieldSeen[project.FieldSlot]; !ok {
				selectedFields = append(selectedFields, project.FieldSlot)
				fieldSeen[project.FieldSlot] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[project.FieldName]; !ok {
				selectedFields = append(selectedFields, project.FieldName)
				fieldSeen[project.FieldName] = struct{}{}
			}
		case "slug":
			if _, ok := fieldSeen[project.FieldSlug]; !ok {
				selectedFields = append(selectedFields, project.FieldSlug)
				fieldSeen[project.FieldSlug] = struct{}{}
			}
		case "valueDecimal":
			if _, ok := fieldSeen[project.FieldValueDecimal]; !ok {
				selectedFields = append(selectedFields, project.FieldValueDecimal)
				fieldSeen[project.FieldValueDecimal] = struct{}{}
			}
		case "forecastedApr":
			if _, ok := fieldSeen[project.FieldForecastedApr]; !ok {
				selectedFields = append(selectedFields, project.FieldForecastedApr)
				fieldSeen[project.FieldForecastedApr] = struct{}{}
			}
		case "totalValue":
			if _, ok := fieldSeen[project.FieldTotalValue]; !ok {
				selectedFields = append(selectedFields, project.FieldTotalValue)
				fieldSeen[project.FieldTotalValue] = struct{}{}
			}
		case "paymentToken":
			if _, ok := fieldSeen[project.FieldPaymentToken]; !ok {
				selectedFields = append(selectedFields, project.FieldPaymentToken)
				fieldSeen[project.FieldPaymentToken] = struct{}{}
			}
		case "metadata":
			if _, ok := fieldSeen[project.FieldMetadata]; !ok {
				selectedFields = append(selectedFields, project.FieldMetadata)
				fieldSeen[project.FieldMetadata] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		pr.Select(selectedFields...)
	}
	return nil
}

type projectPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ProjectPaginateOption
}

func newProjectPaginateArgs(rv map[string]any) *projectPaginateArgs {
	args := &projectPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput any, path ...string) map[string]any {
	field := collectedField(ctx, path...)
	if field == nil || field.Arguments == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	args := field.ArgumentMap(oc.Variables)
	return unmarshalArgs(ctx, whereInput, args)
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput any, args map[string]any) map[string]any {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

// mayAddCondition appends another type condition to the satisfies list
// if it does not exist in the list.
func mayAddCondition(satisfies []string, typeCond []string) []string {
Cond:
	for _, c := range typeCond {
		for _, s := range satisfies {
			if c == s {
				continue Cond
			}
		}
		satisfies = append(satisfies, c)
	}
	return satisfies
}
