// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/carbonable/carbonable-launchpad-backend/ent/mint"
	"github.com/carbonable/carbonable-launchpad-backend/ent/project"
)

// Mint is the model entity for the Mint schema.
type Mint struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// MinValuePerTx holds the value of the "min_value_per_tx" field.
	MinValuePerTx string `json:"min_value_per_tx,omitempty"`
	// MaxValuePerTx holds the value of the "max_value_per_tx" field.
	MaxValuePerTx string `json:"max_value_per_tx,omitempty"`
	// MinterAddress holds the value of the "minter_address" field.
	MinterAddress string `json:"minter_address,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MintQuery when eager-loading is set.
	Edges        MintEdges `json:"edges"`
	project_mint *int
	selectValues sql.SelectValues
}

// MintEdges holds the relations/edges for other nodes in the graph.
type MintEdges struct {
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MintEdges) ProjectOrErr() (*Project, error) {
	if e.Project != nil {
		return e.Project, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: project.Label}
	}
	return nil, &NotLoadedError{edge: "project"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Mint) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case mint.FieldID:
			values[i] = new(sql.NullInt64)
		case mint.FieldMinValuePerTx, mint.FieldMaxValuePerTx, mint.FieldMinterAddress:
			values[i] = new(sql.NullString)
		case mint.ForeignKeys[0]: // project_mint
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Mint fields.
func (m *Mint) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case mint.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case mint.FieldMinValuePerTx:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field min_value_per_tx", values[i])
			} else if value.Valid {
				m.MinValuePerTx = value.String
			}
		case mint.FieldMaxValuePerTx:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field max_value_per_tx", values[i])
			} else if value.Valid {
				m.MaxValuePerTx = value.String
			}
		case mint.FieldMinterAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field minter_address", values[i])
			} else if value.Valid {
				m.MinterAddress = value.String
			}
		case mint.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field project_mint", value)
			} else if value.Valid {
				m.project_mint = new(int)
				*m.project_mint = int(value.Int64)
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Mint.
// This includes values selected through modifiers, order, etc.
func (m *Mint) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryProject queries the "project" edge of the Mint entity.
func (m *Mint) QueryProject() *ProjectQuery {
	return NewMintClient(m.config).QueryProject(m)
}

// Update returns a builder for updating this Mint.
// Note that you need to call Mint.Unwrap() before calling this method if this Mint
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Mint) Update() *MintUpdateOne {
	return NewMintClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Mint entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Mint) Unwrap() *Mint {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Mint is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Mint) String() string {
	var builder strings.Builder
	builder.WriteString("Mint(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("min_value_per_tx=")
	builder.WriteString(m.MinValuePerTx)
	builder.WriteString(", ")
	builder.WriteString("max_value_per_tx=")
	builder.WriteString(m.MaxValuePerTx)
	builder.WriteString(", ")
	builder.WriteString("minter_address=")
	builder.WriteString(m.MinterAddress)
	builder.WriteByte(')')
	return builder.String()
}

// Mints is a parsable slice of Mint.
type Mints []*Mint
