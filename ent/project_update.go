// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/carbonable/carbonable-launchpad-backend/ent/launchpad"
	"github.com/carbonable/carbonable-launchpad-backend/ent/mint"
	"github.com/carbonable/carbonable-launchpad-backend/ent/predicate"
	"github.com/carbonable/carbonable-launchpad-backend/ent/project"
	"github.com/carbonable/carbonable-launchpad-backend/ent/schema"
)

// ProjectUpdate is the builder for updating Project entities.
type ProjectUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectMutation
}

// Where appends a list predicates to the ProjectUpdate builder.
func (pu *ProjectUpdate) Where(ps ...predicate.Project) *ProjectUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetAddress sets the "address" field.
func (pu *ProjectUpdate) SetAddress(s string) *ProjectUpdate {
	pu.mutation.SetAddress(s)
	return pu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableAddress(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetAddress(*s)
	}
	return pu
}

// SetSlot sets the "slot" field.
func (pu *ProjectUpdate) SetSlot(i int) *ProjectUpdate {
	pu.mutation.ResetSlot()
	pu.mutation.SetSlot(i)
	return pu
}

// SetNillableSlot sets the "slot" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableSlot(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetSlot(*i)
	}
	return pu
}

// AddSlot adds i to the "slot" field.
func (pu *ProjectUpdate) AddSlot(i int) *ProjectUpdate {
	pu.mutation.AddSlot(i)
	return pu
}

// SetName sets the "name" field.
func (pu *ProjectUpdate) SetName(s string) *ProjectUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableName(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetSlug sets the "slug" field.
func (pu *ProjectUpdate) SetSlug(s string) *ProjectUpdate {
	pu.mutation.SetSlug(s)
	return pu
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableSlug(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetSlug(*s)
	}
	return pu
}

// SetValueDecimal sets the "value_decimal" field.
func (pu *ProjectUpdate) SetValueDecimal(i int) *ProjectUpdate {
	pu.mutation.ResetValueDecimal()
	pu.mutation.SetValueDecimal(i)
	return pu
}

// SetNillableValueDecimal sets the "value_decimal" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableValueDecimal(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetValueDecimal(*i)
	}
	return pu
}

// AddValueDecimal adds i to the "value_decimal" field.
func (pu *ProjectUpdate) AddValueDecimal(i int) *ProjectUpdate {
	pu.mutation.AddValueDecimal(i)
	return pu
}

// SetForecastedApr sets the "forecasted_apr" field.
func (pu *ProjectUpdate) SetForecastedApr(s string) *ProjectUpdate {
	pu.mutation.SetForecastedApr(s)
	return pu
}

// SetNillableForecastedApr sets the "forecasted_apr" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableForecastedApr(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetForecastedApr(*s)
	}
	return pu
}

// ClearForecastedApr clears the value of the "forecasted_apr" field.
func (pu *ProjectUpdate) ClearForecastedApr() *ProjectUpdate {
	pu.mutation.ClearForecastedApr()
	return pu
}

// SetTotalValue sets the "total_value" field.
func (pu *ProjectUpdate) SetTotalValue(s string) *ProjectUpdate {
	pu.mutation.SetTotalValue(s)
	return pu
}

// SetNillableTotalValue sets the "total_value" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableTotalValue(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetTotalValue(*s)
	}
	return pu
}

// SetPaymentToken sets the "payment_token" field.
func (pu *ProjectUpdate) SetPaymentToken(st schema.PaymentToken) *ProjectUpdate {
	pu.mutation.SetPaymentToken(st)
	return pu
}

// SetNillablePaymentToken sets the "payment_token" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillablePaymentToken(st *schema.PaymentToken) *ProjectUpdate {
	if st != nil {
		pu.SetPaymentToken(*st)
	}
	return pu
}

// SetMetadata sets the "metadata" field.
func (pu *ProjectUpdate) SetMetadata(s schema.Metadata) *ProjectUpdate {
	pu.mutation.SetMetadata(s)
	return pu
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableMetadata(s *schema.Metadata) *ProjectUpdate {
	if s != nil {
		pu.SetMetadata(*s)
	}
	return pu
}

// SetMintID sets the "mint" edge to the Mint entity by ID.
func (pu *ProjectUpdate) SetMintID(id int) *ProjectUpdate {
	pu.mutation.SetMintID(id)
	return pu
}

// SetNillableMintID sets the "mint" edge to the Mint entity by ID if the given value is not nil.
func (pu *ProjectUpdate) SetNillableMintID(id *int) *ProjectUpdate {
	if id != nil {
		pu = pu.SetMintID(*id)
	}
	return pu
}

// SetMint sets the "mint" edge to the Mint entity.
func (pu *ProjectUpdate) SetMint(m *Mint) *ProjectUpdate {
	return pu.SetMintID(m.ID)
}

// SetLaunchpadID sets the "launchpad" edge to the Launchpad entity by ID.
func (pu *ProjectUpdate) SetLaunchpadID(id int) *ProjectUpdate {
	pu.mutation.SetLaunchpadID(id)
	return pu
}

// SetNillableLaunchpadID sets the "launchpad" edge to the Launchpad entity by ID if the given value is not nil.
func (pu *ProjectUpdate) SetNillableLaunchpadID(id *int) *ProjectUpdate {
	if id != nil {
		pu = pu.SetLaunchpadID(*id)
	}
	return pu
}

// SetLaunchpad sets the "launchpad" edge to the Launchpad entity.
func (pu *ProjectUpdate) SetLaunchpad(l *Launchpad) *ProjectUpdate {
	return pu.SetLaunchpadID(l.ID)
}

// Mutation returns the ProjectMutation object of the builder.
func (pu *ProjectUpdate) Mutation() *ProjectMutation {
	return pu.mutation
}

// ClearMint clears the "mint" edge to the Mint entity.
func (pu *ProjectUpdate) ClearMint() *ProjectUpdate {
	pu.mutation.ClearMint()
	return pu
}

// ClearLaunchpad clears the "launchpad" edge to the Launchpad entity.
func (pu *ProjectUpdate) ClearLaunchpad() *ProjectUpdate {
	pu.mutation.ClearLaunchpad()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProjectUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProjectUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProjectUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProjectUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *ProjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(project.Table, project.Columns, sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Address(); ok {
		_spec.SetField(project.FieldAddress, field.TypeString, value)
	}
	if value, ok := pu.mutation.Slot(); ok {
		_spec.SetField(project.FieldSlot, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedSlot(); ok {
		_spec.AddField(project.FieldSlot, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(project.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Slug(); ok {
		_spec.SetField(project.FieldSlug, field.TypeString, value)
	}
	if value, ok := pu.mutation.ValueDecimal(); ok {
		_spec.SetField(project.FieldValueDecimal, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedValueDecimal(); ok {
		_spec.AddField(project.FieldValueDecimal, field.TypeInt, value)
	}
	if value, ok := pu.mutation.ForecastedApr(); ok {
		_spec.SetField(project.FieldForecastedApr, field.TypeString, value)
	}
	if pu.mutation.ForecastedAprCleared() {
		_spec.ClearField(project.FieldForecastedApr, field.TypeString)
	}
	if value, ok := pu.mutation.TotalValue(); ok {
		_spec.SetField(project.FieldTotalValue, field.TypeString, value)
	}
	if value, ok := pu.mutation.PaymentToken(); ok {
		_spec.SetField(project.FieldPaymentToken, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.Metadata(); ok {
		_spec.SetField(project.FieldMetadata, field.TypeJSON, value)
	}
	if pu.mutation.MintCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   project.MintTable,
			Columns: []string{project.MintColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mint.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.MintIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   project.MintTable,
			Columns: []string{project.MintColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mint.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.LaunchpadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   project.LaunchpadTable,
			Columns: []string{project.LaunchpadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(launchpad.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.LaunchpadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   project.LaunchpadTable,
			Columns: []string{project.LaunchpadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(launchpad.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProjectUpdateOne is the builder for updating a single Project entity.
type ProjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectMutation
}

// SetAddress sets the "address" field.
func (puo *ProjectUpdateOne) SetAddress(s string) *ProjectUpdateOne {
	puo.mutation.SetAddress(s)
	return puo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableAddress(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetAddress(*s)
	}
	return puo
}

// SetSlot sets the "slot" field.
func (puo *ProjectUpdateOne) SetSlot(i int) *ProjectUpdateOne {
	puo.mutation.ResetSlot()
	puo.mutation.SetSlot(i)
	return puo
}

// SetNillableSlot sets the "slot" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableSlot(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetSlot(*i)
	}
	return puo
}

// AddSlot adds i to the "slot" field.
func (puo *ProjectUpdateOne) AddSlot(i int) *ProjectUpdateOne {
	puo.mutation.AddSlot(i)
	return puo
}

// SetName sets the "name" field.
func (puo *ProjectUpdateOne) SetName(s string) *ProjectUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableName(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetSlug sets the "slug" field.
func (puo *ProjectUpdateOne) SetSlug(s string) *ProjectUpdateOne {
	puo.mutation.SetSlug(s)
	return puo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableSlug(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetSlug(*s)
	}
	return puo
}

// SetValueDecimal sets the "value_decimal" field.
func (puo *ProjectUpdateOne) SetValueDecimal(i int) *ProjectUpdateOne {
	puo.mutation.ResetValueDecimal()
	puo.mutation.SetValueDecimal(i)
	return puo
}

// SetNillableValueDecimal sets the "value_decimal" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableValueDecimal(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetValueDecimal(*i)
	}
	return puo
}

// AddValueDecimal adds i to the "value_decimal" field.
func (puo *ProjectUpdateOne) AddValueDecimal(i int) *ProjectUpdateOne {
	puo.mutation.AddValueDecimal(i)
	return puo
}

// SetForecastedApr sets the "forecasted_apr" field.
func (puo *ProjectUpdateOne) SetForecastedApr(s string) *ProjectUpdateOne {
	puo.mutation.SetForecastedApr(s)
	return puo
}

// SetNillableForecastedApr sets the "forecasted_apr" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableForecastedApr(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetForecastedApr(*s)
	}
	return puo
}

// ClearForecastedApr clears the value of the "forecasted_apr" field.
func (puo *ProjectUpdateOne) ClearForecastedApr() *ProjectUpdateOne {
	puo.mutation.ClearForecastedApr()
	return puo
}

// SetTotalValue sets the "total_value" field.
func (puo *ProjectUpdateOne) SetTotalValue(s string) *ProjectUpdateOne {
	puo.mutation.SetTotalValue(s)
	return puo
}

// SetNillableTotalValue sets the "total_value" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableTotalValue(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetTotalValue(*s)
	}
	return puo
}

// SetPaymentToken sets the "payment_token" field.
func (puo *ProjectUpdateOne) SetPaymentToken(st schema.PaymentToken) *ProjectUpdateOne {
	puo.mutation.SetPaymentToken(st)
	return puo
}

// SetNillablePaymentToken sets the "payment_token" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillablePaymentToken(st *schema.PaymentToken) *ProjectUpdateOne {
	if st != nil {
		puo.SetPaymentToken(*st)
	}
	return puo
}

// SetMetadata sets the "metadata" field.
func (puo *ProjectUpdateOne) SetMetadata(s schema.Metadata) *ProjectUpdateOne {
	puo.mutation.SetMetadata(s)
	return puo
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableMetadata(s *schema.Metadata) *ProjectUpdateOne {
	if s != nil {
		puo.SetMetadata(*s)
	}
	return puo
}

// SetMintID sets the "mint" edge to the Mint entity by ID.
func (puo *ProjectUpdateOne) SetMintID(id int) *ProjectUpdateOne {
	puo.mutation.SetMintID(id)
	return puo
}

// SetNillableMintID sets the "mint" edge to the Mint entity by ID if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableMintID(id *int) *ProjectUpdateOne {
	if id != nil {
		puo = puo.SetMintID(*id)
	}
	return puo
}

// SetMint sets the "mint" edge to the Mint entity.
func (puo *ProjectUpdateOne) SetMint(m *Mint) *ProjectUpdateOne {
	return puo.SetMintID(m.ID)
}

// SetLaunchpadID sets the "launchpad" edge to the Launchpad entity by ID.
func (puo *ProjectUpdateOne) SetLaunchpadID(id int) *ProjectUpdateOne {
	puo.mutation.SetLaunchpadID(id)
	return puo
}

// SetNillableLaunchpadID sets the "launchpad" edge to the Launchpad entity by ID if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableLaunchpadID(id *int) *ProjectUpdateOne {
	if id != nil {
		puo = puo.SetLaunchpadID(*id)
	}
	return puo
}

// SetLaunchpad sets the "launchpad" edge to the Launchpad entity.
func (puo *ProjectUpdateOne) SetLaunchpad(l *Launchpad) *ProjectUpdateOne {
	return puo.SetLaunchpadID(l.ID)
}

// Mutation returns the ProjectMutation object of the builder.
func (puo *ProjectUpdateOne) Mutation() *ProjectMutation {
	return puo.mutation
}

// ClearMint clears the "mint" edge to the Mint entity.
func (puo *ProjectUpdateOne) ClearMint() *ProjectUpdateOne {
	puo.mutation.ClearMint()
	return puo
}

// ClearLaunchpad clears the "launchpad" edge to the Launchpad entity.
func (puo *ProjectUpdateOne) ClearLaunchpad() *ProjectUpdateOne {
	puo.mutation.ClearLaunchpad()
	return puo
}

// Where appends a list predicates to the ProjectUpdate builder.
func (puo *ProjectUpdateOne) Where(ps ...predicate.Project) *ProjectUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProjectUpdateOne) Select(field string, fields ...string) *ProjectUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Project entity.
func (puo *ProjectUpdateOne) Save(ctx context.Context) (*Project, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProjectUpdateOne) SaveX(ctx context.Context) *Project {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProjectUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProjectUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *ProjectUpdateOne) sqlSave(ctx context.Context) (_node *Project, err error) {
	_spec := sqlgraph.NewUpdateSpec(project.Table, project.Columns, sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Project.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, project.FieldID)
		for _, f := range fields {
			if !project.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != project.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Address(); ok {
		_spec.SetField(project.FieldAddress, field.TypeString, value)
	}
	if value, ok := puo.mutation.Slot(); ok {
		_spec.SetField(project.FieldSlot, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedSlot(); ok {
		_spec.AddField(project.FieldSlot, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(project.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Slug(); ok {
		_spec.SetField(project.FieldSlug, field.TypeString, value)
	}
	if value, ok := puo.mutation.ValueDecimal(); ok {
		_spec.SetField(project.FieldValueDecimal, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedValueDecimal(); ok {
		_spec.AddField(project.FieldValueDecimal, field.TypeInt, value)
	}
	if value, ok := puo.mutation.ForecastedApr(); ok {
		_spec.SetField(project.FieldForecastedApr, field.TypeString, value)
	}
	if puo.mutation.ForecastedAprCleared() {
		_spec.ClearField(project.FieldForecastedApr, field.TypeString)
	}
	if value, ok := puo.mutation.TotalValue(); ok {
		_spec.SetField(project.FieldTotalValue, field.TypeString, value)
	}
	if value, ok := puo.mutation.PaymentToken(); ok {
		_spec.SetField(project.FieldPaymentToken, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.Metadata(); ok {
		_spec.SetField(project.FieldMetadata, field.TypeJSON, value)
	}
	if puo.mutation.MintCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   project.MintTable,
			Columns: []string{project.MintColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mint.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.MintIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   project.MintTable,
			Columns: []string{project.MintColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mint.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.LaunchpadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   project.LaunchpadTable,
			Columns: []string{project.LaunchpadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(launchpad.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.LaunchpadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   project.LaunchpadTable,
			Columns: []string{project.LaunchpadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(launchpad.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Project{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
