// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/carbonable/carbonable-launchpad-backend/ent/launchpad"
	"github.com/carbonable/carbonable-launchpad-backend/ent/mint"
	"github.com/carbonable/carbonable-launchpad-backend/ent/predicate"
	"github.com/carbonable/carbonable-launchpad-backend/ent/project"
	"github.com/carbonable/carbonable-launchpad-backend/ent/schema"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeLaunchpad = "Launchpad"
	TypeMint      = "Mint"
	TypeProject   = "Project"
)

// LaunchpadMutation represents an operation that mutates the Launchpad nodes in the graph.
type LaunchpadMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	is_ready              *bool
	minter_contract       *schema.MinterContract
	whitelisted_sale_open *bool
	public_sale_open      *bool
	is_sold_out           *bool
	is_canceled           *bool
	clearedFields         map[string]struct{}
	project               *int
	clearedproject        bool
	done                  bool
	oldValue              func(context.Context) (*Launchpad, error)
	predicates            []predicate.Launchpad
}

var _ ent.Mutation = (*LaunchpadMutation)(nil)

// launchpadOption allows management of the mutation configuration using functional options.
type launchpadOption func(*LaunchpadMutation)

// newLaunchpadMutation creates new mutation for the Launchpad entity.
func newLaunchpadMutation(c config, op Op, opts ...launchpadOption) *LaunchpadMutation {
	m := &LaunchpadMutation{
		config:        c,
		op:            op,
		typ:           TypeLaunchpad,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLaunchpadID sets the ID field of the mutation.
func withLaunchpadID(id int) launchpadOption {
	return func(m *LaunchpadMutation) {
		var (
			err   error
			once  sync.Once
			value *Launchpad
		)
		m.oldValue = func(ctx context.Context) (*Launchpad, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Launchpad.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLaunchpad sets the old Launchpad of the mutation.
func withLaunchpad(node *Launchpad) launchpadOption {
	return func(m *LaunchpadMutation) {
		m.oldValue = func(context.Context) (*Launchpad, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LaunchpadMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LaunchpadMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LaunchpadMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LaunchpadMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Launchpad.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIsReady sets the "is_ready" field.
func (m *LaunchpadMutation) SetIsReady(b bool) {
	m.is_ready = &b
}

// IsReady returns the value of the "is_ready" field in the mutation.
func (m *LaunchpadMutation) IsReady() (r bool, exists bool) {
	v := m.is_ready
	if v == nil {
		return
	}
	return *v, true
}

// OldIsReady returns the old "is_ready" field's value of the Launchpad entity.
// If the Launchpad object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LaunchpadMutation) OldIsReady(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsReady is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsReady requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsReady: %w", err)
	}
	return oldValue.IsReady, nil
}

// ResetIsReady resets all changes to the "is_ready" field.
func (m *LaunchpadMutation) ResetIsReady() {
	m.is_ready = nil
}

// SetMinterContract sets the "minter_contract" field.
func (m *LaunchpadMutation) SetMinterContract(sc schema.MinterContract) {
	m.minter_contract = &sc
}

// MinterContract returns the value of the "minter_contract" field in the mutation.
func (m *LaunchpadMutation) MinterContract() (r schema.MinterContract, exists bool) {
	v := m.minter_contract
	if v == nil {
		return
	}
	return *v, true
}

// OldMinterContract returns the old "minter_contract" field's value of the Launchpad entity.
// If the Launchpad object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LaunchpadMutation) OldMinterContract(ctx context.Context) (v schema.MinterContract, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMinterContract is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMinterContract requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMinterContract: %w", err)
	}
	return oldValue.MinterContract, nil
}

// ResetMinterContract resets all changes to the "minter_contract" field.
func (m *LaunchpadMutation) ResetMinterContract() {
	m.minter_contract = nil
}

// SetWhitelistedSaleOpen sets the "whitelisted_sale_open" field.
func (m *LaunchpadMutation) SetWhitelistedSaleOpen(b bool) {
	m.whitelisted_sale_open = &b
}

// WhitelistedSaleOpen returns the value of the "whitelisted_sale_open" field in the mutation.
func (m *LaunchpadMutation) WhitelistedSaleOpen() (r bool, exists bool) {
	v := m.whitelisted_sale_open
	if v == nil {
		return
	}
	return *v, true
}

// OldWhitelistedSaleOpen returns the old "whitelisted_sale_open" field's value of the Launchpad entity.
// If the Launchpad object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LaunchpadMutation) OldWhitelistedSaleOpen(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWhitelistedSaleOpen is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWhitelistedSaleOpen requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWhitelistedSaleOpen: %w", err)
	}
	return oldValue.WhitelistedSaleOpen, nil
}

// ResetWhitelistedSaleOpen resets all changes to the "whitelisted_sale_open" field.
func (m *LaunchpadMutation) ResetWhitelistedSaleOpen() {
	m.whitelisted_sale_open = nil
}

// SetPublicSaleOpen sets the "public_sale_open" field.
func (m *LaunchpadMutation) SetPublicSaleOpen(b bool) {
	m.public_sale_open = &b
}

// PublicSaleOpen returns the value of the "public_sale_open" field in the mutation.
func (m *LaunchpadMutation) PublicSaleOpen() (r bool, exists bool) {
	v := m.public_sale_open
	if v == nil {
		return
	}
	return *v, true
}

// OldPublicSaleOpen returns the old "public_sale_open" field's value of the Launchpad entity.
// If the Launchpad object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LaunchpadMutation) OldPublicSaleOpen(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublicSaleOpen is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublicSaleOpen requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublicSaleOpen: %w", err)
	}
	return oldValue.PublicSaleOpen, nil
}

// ResetPublicSaleOpen resets all changes to the "public_sale_open" field.
func (m *LaunchpadMutation) ResetPublicSaleOpen() {
	m.public_sale_open = nil
}

// SetIsSoldOut sets the "is_sold_out" field.
func (m *LaunchpadMutation) SetIsSoldOut(b bool) {
	m.is_sold_out = &b
}

// IsSoldOut returns the value of the "is_sold_out" field in the mutation.
func (m *LaunchpadMutation) IsSoldOut() (r bool, exists bool) {
	v := m.is_sold_out
	if v == nil {
		return
	}
	return *v, true
}

// OldIsSoldOut returns the old "is_sold_out" field's value of the Launchpad entity.
// If the Launchpad object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LaunchpadMutation) OldIsSoldOut(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsSoldOut is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsSoldOut requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsSoldOut: %w", err)
	}
	return oldValue.IsSoldOut, nil
}

// ResetIsSoldOut resets all changes to the "is_sold_out" field.
func (m *LaunchpadMutation) ResetIsSoldOut() {
	m.is_sold_out = nil
}

// SetIsCanceled sets the "is_canceled" field.
func (m *LaunchpadMutation) SetIsCanceled(b bool) {
	m.is_canceled = &b
}

// IsCanceled returns the value of the "is_canceled" field in the mutation.
func (m *LaunchpadMutation) IsCanceled() (r bool, exists bool) {
	v := m.is_canceled
	if v == nil {
		return
	}
	return *v, true
}

// OldIsCanceled returns the old "is_canceled" field's value of the Launchpad entity.
// If the Launchpad object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LaunchpadMutation) OldIsCanceled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsCanceled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsCanceled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsCanceled: %w", err)
	}
	return oldValue.IsCanceled, nil
}

// ResetIsCanceled resets all changes to the "is_canceled" field.
func (m *LaunchpadMutation) ResetIsCanceled() {
	m.is_canceled = nil
}

// SetProjectID sets the "project" edge to the Project entity by id.
func (m *LaunchpadMutation) SetProjectID(id int) {
	m.project = &id
}

// ClearProject clears the "project" edge to the Project entity.
func (m *LaunchpadMutation) ClearProject() {
	m.clearedproject = true
}

// ProjectCleared reports if the "project" edge to the Project entity was cleared.
func (m *LaunchpadMutation) ProjectCleared() bool {
	return m.clearedproject
}

// ProjectID returns the "project" edge ID in the mutation.
func (m *LaunchpadMutation) ProjectID() (id int, exists bool) {
	if m.project != nil {
		return *m.project, true
	}
	return
}

// ProjectIDs returns the "project" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProjectID instead. It exists only for internal usage by the builders.
func (m *LaunchpadMutation) ProjectIDs() (ids []int) {
	if id := m.project; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProject resets all changes to the "project" edge.
func (m *LaunchpadMutation) ResetProject() {
	m.project = nil
	m.clearedproject = false
}

// Where appends a list predicates to the LaunchpadMutation builder.
func (m *LaunchpadMutation) Where(ps ...predicate.Launchpad) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LaunchpadMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LaunchpadMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Launchpad, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LaunchpadMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LaunchpadMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Launchpad).
func (m *LaunchpadMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LaunchpadMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.is_ready != nil {
		fields = append(fields, launchpad.FieldIsReady)
	}
	if m.minter_contract != nil {
		fields = append(fields, launchpad.FieldMinterContract)
	}
	if m.whitelisted_sale_open != nil {
		fields = append(fields, launchpad.FieldWhitelistedSaleOpen)
	}
	if m.public_sale_open != nil {
		fields = append(fields, launchpad.FieldPublicSaleOpen)
	}
	if m.is_sold_out != nil {
		fields = append(fields, launchpad.FieldIsSoldOut)
	}
	if m.is_canceled != nil {
		fields = append(fields, launchpad.FieldIsCanceled)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LaunchpadMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case launchpad.FieldIsReady:
		return m.IsReady()
	case launchpad.FieldMinterContract:
		return m.MinterContract()
	case launchpad.FieldWhitelistedSaleOpen:
		return m.WhitelistedSaleOpen()
	case launchpad.FieldPublicSaleOpen:
		return m.PublicSaleOpen()
	case launchpad.FieldIsSoldOut:
		return m.IsSoldOut()
	case launchpad.FieldIsCanceled:
		return m.IsCanceled()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LaunchpadMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case launchpad.FieldIsReady:
		return m.OldIsReady(ctx)
	case launchpad.FieldMinterContract:
		return m.OldMinterContract(ctx)
	case launchpad.FieldWhitelistedSaleOpen:
		return m.OldWhitelistedSaleOpen(ctx)
	case launchpad.FieldPublicSaleOpen:
		return m.OldPublicSaleOpen(ctx)
	case launchpad.FieldIsSoldOut:
		return m.OldIsSoldOut(ctx)
	case launchpad.FieldIsCanceled:
		return m.OldIsCanceled(ctx)
	}
	return nil, fmt.Errorf("unknown Launchpad field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LaunchpadMutation) SetField(name string, value ent.Value) error {
	switch name {
	case launchpad.FieldIsReady:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsReady(v)
		return nil
	case launchpad.FieldMinterContract:
		v, ok := value.(schema.MinterContract)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMinterContract(v)
		return nil
	case launchpad.FieldWhitelistedSaleOpen:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWhitelistedSaleOpen(v)
		return nil
	case launchpad.FieldPublicSaleOpen:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublicSaleOpen(v)
		return nil
	case launchpad.FieldIsSoldOut:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsSoldOut(v)
		return nil
	case launchpad.FieldIsCanceled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsCanceled(v)
		return nil
	}
	return fmt.Errorf("unknown Launchpad field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LaunchpadMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LaunchpadMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LaunchpadMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Launchpad numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LaunchpadMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LaunchpadMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LaunchpadMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Launchpad nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LaunchpadMutation) ResetField(name string) error {
	switch name {
	case launchpad.FieldIsReady:
		m.ResetIsReady()
		return nil
	case launchpad.FieldMinterContract:
		m.ResetMinterContract()
		return nil
	case launchpad.FieldWhitelistedSaleOpen:
		m.ResetWhitelistedSaleOpen()
		return nil
	case launchpad.FieldPublicSaleOpen:
		m.ResetPublicSaleOpen()
		return nil
	case launchpad.FieldIsSoldOut:
		m.ResetIsSoldOut()
		return nil
	case launchpad.FieldIsCanceled:
		m.ResetIsCanceled()
		return nil
	}
	return fmt.Errorf("unknown Launchpad field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LaunchpadMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.project != nil {
		edges = append(edges, launchpad.EdgeProject)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LaunchpadMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case launchpad.EdgeProject:
		if id := m.project; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LaunchpadMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LaunchpadMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LaunchpadMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedproject {
		edges = append(edges, launchpad.EdgeProject)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LaunchpadMutation) EdgeCleared(name string) bool {
	switch name {
	case launchpad.EdgeProject:
		return m.clearedproject
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LaunchpadMutation) ClearEdge(name string) error {
	switch name {
	case launchpad.EdgeProject:
		m.ClearProject()
		return nil
	}
	return fmt.Errorf("unknown Launchpad unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LaunchpadMutation) ResetEdge(name string) error {
	switch name {
	case launchpad.EdgeProject:
		m.ResetProject()
		return nil
	}
	return fmt.Errorf("unknown Launchpad edge %s", name)
}

// MintMutation represents an operation that mutates the Mint nodes in the graph.
type MintMutation struct {
	config
	op               Op
	typ              string
	id               *int
	min_value_per_tx *string
	max_value_per_tx *string
	minter_address   *string
	clearedFields    map[string]struct{}
	project          *int
	clearedproject   bool
	done             bool
	oldValue         func(context.Context) (*Mint, error)
	predicates       []predicate.Mint
}

var _ ent.Mutation = (*MintMutation)(nil)

// mintOption allows management of the mutation configuration using functional options.
type mintOption func(*MintMutation)

// newMintMutation creates new mutation for the Mint entity.
func newMintMutation(c config, op Op, opts ...mintOption) *MintMutation {
	m := &MintMutation{
		config:        c,
		op:            op,
		typ:           TypeMint,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMintID sets the ID field of the mutation.
func withMintID(id int) mintOption {
	return func(m *MintMutation) {
		var (
			err   error
			once  sync.Once
			value *Mint
		)
		m.oldValue = func(ctx context.Context) (*Mint, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Mint.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMint sets the old Mint of the mutation.
func withMint(node *Mint) mintOption {
	return func(m *MintMutation) {
		m.oldValue = func(context.Context) (*Mint, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MintMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MintMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MintMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MintMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Mint.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMinValuePerTx sets the "min_value_per_tx" field.
func (m *MintMutation) SetMinValuePerTx(s string) {
	m.min_value_per_tx = &s
}

// MinValuePerTx returns the value of the "min_value_per_tx" field in the mutation.
func (m *MintMutation) MinValuePerTx() (r string, exists bool) {
	v := m.min_value_per_tx
	if v == nil {
		return
	}
	return *v, true
}

// OldMinValuePerTx returns the old "min_value_per_tx" field's value of the Mint entity.
// If the Mint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MintMutation) OldMinValuePerTx(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMinValuePerTx is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMinValuePerTx requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMinValuePerTx: %w", err)
	}
	return oldValue.MinValuePerTx, nil
}

// ResetMinValuePerTx resets all changes to the "min_value_per_tx" field.
func (m *MintMutation) ResetMinValuePerTx() {
	m.min_value_per_tx = nil
}

// SetMaxValuePerTx sets the "max_value_per_tx" field.
func (m *MintMutation) SetMaxValuePerTx(s string) {
	m.max_value_per_tx = &s
}

// MaxValuePerTx returns the value of the "max_value_per_tx" field in the mutation.
func (m *MintMutation) MaxValuePerTx() (r string, exists bool) {
	v := m.max_value_per_tx
	if v == nil {
		return
	}
	return *v, true
}

// OldMaxValuePerTx returns the old "max_value_per_tx" field's value of the Mint entity.
// If the Mint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MintMutation) OldMaxValuePerTx(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMaxValuePerTx is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMaxValuePerTx requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMaxValuePerTx: %w", err)
	}
	return oldValue.MaxValuePerTx, nil
}

// ResetMaxValuePerTx resets all changes to the "max_value_per_tx" field.
func (m *MintMutation) ResetMaxValuePerTx() {
	m.max_value_per_tx = nil
}

// SetMinterAddress sets the "minter_address" field.
func (m *MintMutation) SetMinterAddress(s string) {
	m.minter_address = &s
}

// MinterAddress returns the value of the "minter_address" field in the mutation.
func (m *MintMutation) MinterAddress() (r string, exists bool) {
	v := m.minter_address
	if v == nil {
		return
	}
	return *v, true
}

// OldMinterAddress returns the old "minter_address" field's value of the Mint entity.
// If the Mint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MintMutation) OldMinterAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMinterAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMinterAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMinterAddress: %w", err)
	}
	return oldValue.MinterAddress, nil
}

// ResetMinterAddress resets all changes to the "minter_address" field.
func (m *MintMutation) ResetMinterAddress() {
	m.minter_address = nil
}

// SetProjectID sets the "project" edge to the Project entity by id.
func (m *MintMutation) SetProjectID(id int) {
	m.project = &id
}

// ClearProject clears the "project" edge to the Project entity.
func (m *MintMutation) ClearProject() {
	m.clearedproject = true
}

// ProjectCleared reports if the "project" edge to the Project entity was cleared.
func (m *MintMutation) ProjectCleared() bool {
	return m.clearedproject
}

// ProjectID returns the "project" edge ID in the mutation.
func (m *MintMutation) ProjectID() (id int, exists bool) {
	if m.project != nil {
		return *m.project, true
	}
	return
}

// ProjectIDs returns the "project" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProjectID instead. It exists only for internal usage by the builders.
func (m *MintMutation) ProjectIDs() (ids []int) {
	if id := m.project; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProject resets all changes to the "project" edge.
func (m *MintMutation) ResetProject() {
	m.project = nil
	m.clearedproject = false
}

// Where appends a list predicates to the MintMutation builder.
func (m *MintMutation) Where(ps ...predicate.Mint) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MintMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MintMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Mint, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MintMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MintMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Mint).
func (m *MintMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MintMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.min_value_per_tx != nil {
		fields = append(fields, mint.FieldMinValuePerTx)
	}
	if m.max_value_per_tx != nil {
		fields = append(fields, mint.FieldMaxValuePerTx)
	}
	if m.minter_address != nil {
		fields = append(fields, mint.FieldMinterAddress)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MintMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case mint.FieldMinValuePerTx:
		return m.MinValuePerTx()
	case mint.FieldMaxValuePerTx:
		return m.MaxValuePerTx()
	case mint.FieldMinterAddress:
		return m.MinterAddress()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MintMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case mint.FieldMinValuePerTx:
		return m.OldMinValuePerTx(ctx)
	case mint.FieldMaxValuePerTx:
		return m.OldMaxValuePerTx(ctx)
	case mint.FieldMinterAddress:
		return m.OldMinterAddress(ctx)
	}
	return nil, fmt.Errorf("unknown Mint field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MintMutation) SetField(name string, value ent.Value) error {
	switch name {
	case mint.FieldMinValuePerTx:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMinValuePerTx(v)
		return nil
	case mint.FieldMaxValuePerTx:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMaxValuePerTx(v)
		return nil
	case mint.FieldMinterAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMinterAddress(v)
		return nil
	}
	return fmt.Errorf("unknown Mint field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MintMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MintMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MintMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Mint numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MintMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MintMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MintMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Mint nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MintMutation) ResetField(name string) error {
	switch name {
	case mint.FieldMinValuePerTx:
		m.ResetMinValuePerTx()
		return nil
	case mint.FieldMaxValuePerTx:
		m.ResetMaxValuePerTx()
		return nil
	case mint.FieldMinterAddress:
		m.ResetMinterAddress()
		return nil
	}
	return fmt.Errorf("unknown Mint field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MintMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.project != nil {
		edges = append(edges, mint.EdgeProject)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MintMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case mint.EdgeProject:
		if id := m.project; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MintMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MintMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MintMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedproject {
		edges = append(edges, mint.EdgeProject)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MintMutation) EdgeCleared(name string) bool {
	switch name {
	case mint.EdgeProject:
		return m.clearedproject
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MintMutation) ClearEdge(name string) error {
	switch name {
	case mint.EdgeProject:
		m.ClearProject()
		return nil
	}
	return fmt.Errorf("unknown Mint unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MintMutation) ResetEdge(name string) error {
	switch name {
	case mint.EdgeProject:
		m.ResetProject()
		return nil
	}
	return fmt.Errorf("unknown Mint edge %s", name)
}

// ProjectMutation represents an operation that mutates the Project nodes in the graph.
type ProjectMutation struct {
	config
	op               Op
	typ              string
	id               *int
	address          *string
	slot             *int
	addslot          *int
	name             *string
	slug             *string
	value_decimal    *int
	addvalue_decimal *int
	forecasted_apr   *string
	total_value      *string
	payment_token    *schema.PaymentToken
	metadata         *schema.Metadata
	clearedFields    map[string]struct{}
	mint             *int
	clearedmint      bool
	launchpad        *int
	clearedlaunchpad bool
	done             bool
	oldValue         func(context.Context) (*Project, error)
	predicates       []predicate.Project
}

var _ ent.Mutation = (*ProjectMutation)(nil)

// projectOption allows management of the mutation configuration using functional options.
type projectOption func(*ProjectMutation)

// newProjectMutation creates new mutation for the Project entity.
func newProjectMutation(c config, op Op, opts ...projectOption) *ProjectMutation {
	m := &ProjectMutation{
		config:        c,
		op:            op,
		typ:           TypeProject,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProjectID sets the ID field of the mutation.
func withProjectID(id int) projectOption {
	return func(m *ProjectMutation) {
		var (
			err   error
			once  sync.Once
			value *Project
		)
		m.oldValue = func(ctx context.Context) (*Project, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Project.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProject sets the old Project of the mutation.
func withProject(node *Project) projectOption {
	return func(m *ProjectMutation) {
		m.oldValue = func(context.Context) (*Project, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProjectMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProjectMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProjectMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProjectMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Project.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAddress sets the "address" field.
func (m *ProjectMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *ProjectMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *ProjectMutation) ResetAddress() {
	m.address = nil
}

// SetSlot sets the "slot" field.
func (m *ProjectMutation) SetSlot(i int) {
	m.slot = &i
	m.addslot = nil
}

// Slot returns the value of the "slot" field in the mutation.
func (m *ProjectMutation) Slot() (r int, exists bool) {
	v := m.slot
	if v == nil {
		return
	}
	return *v, true
}

// OldSlot returns the old "slot" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldSlot(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSlot is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSlot requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSlot: %w", err)
	}
	return oldValue.Slot, nil
}

// AddSlot adds i to the "slot" field.
func (m *ProjectMutation) AddSlot(i int) {
	if m.addslot != nil {
		*m.addslot += i
	} else {
		m.addslot = &i
	}
}

// AddedSlot returns the value that was added to the "slot" field in this mutation.
func (m *ProjectMutation) AddedSlot() (r int, exists bool) {
	v := m.addslot
	if v == nil {
		return
	}
	return *v, true
}

// ResetSlot resets all changes to the "slot" field.
func (m *ProjectMutation) ResetSlot() {
	m.slot = nil
	m.addslot = nil
}

// SetName sets the "name" field.
func (m *ProjectMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ProjectMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ProjectMutation) ResetName() {
	m.name = nil
}

// SetSlug sets the "slug" field.
func (m *ProjectMutation) SetSlug(s string) {
	m.slug = &s
}

// Slug returns the value of the "slug" field in the mutation.
func (m *ProjectMutation) Slug() (r string, exists bool) {
	v := m.slug
	if v == nil {
		return
	}
	return *v, true
}

// OldSlug returns the old "slug" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldSlug(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSlug is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSlug requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSlug: %w", err)
	}
	return oldValue.Slug, nil
}

// ResetSlug resets all changes to the "slug" field.
func (m *ProjectMutation) ResetSlug() {
	m.slug = nil
}

// SetValueDecimal sets the "value_decimal" field.
func (m *ProjectMutation) SetValueDecimal(i int) {
	m.value_decimal = &i
	m.addvalue_decimal = nil
}

// ValueDecimal returns the value of the "value_decimal" field in the mutation.
func (m *ProjectMutation) ValueDecimal() (r int, exists bool) {
	v := m.value_decimal
	if v == nil {
		return
	}
	return *v, true
}

// OldValueDecimal returns the old "value_decimal" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldValueDecimal(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValueDecimal is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValueDecimal requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValueDecimal: %w", err)
	}
	return oldValue.ValueDecimal, nil
}

// AddValueDecimal adds i to the "value_decimal" field.
func (m *ProjectMutation) AddValueDecimal(i int) {
	if m.addvalue_decimal != nil {
		*m.addvalue_decimal += i
	} else {
		m.addvalue_decimal = &i
	}
}

// AddedValueDecimal returns the value that was added to the "value_decimal" field in this mutation.
func (m *ProjectMutation) AddedValueDecimal() (r int, exists bool) {
	v := m.addvalue_decimal
	if v == nil {
		return
	}
	return *v, true
}

// ResetValueDecimal resets all changes to the "value_decimal" field.
func (m *ProjectMutation) ResetValueDecimal() {
	m.value_decimal = nil
	m.addvalue_decimal = nil
}

// SetForecastedApr sets the "forecasted_apr" field.
func (m *ProjectMutation) SetForecastedApr(s string) {
	m.forecasted_apr = &s
}

// ForecastedApr returns the value of the "forecasted_apr" field in the mutation.
func (m *ProjectMutation) ForecastedApr() (r string, exists bool) {
	v := m.forecasted_apr
	if v == nil {
		return
	}
	return *v, true
}

// OldForecastedApr returns the old "forecasted_apr" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldForecastedApr(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldForecastedApr is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldForecastedApr requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldForecastedApr: %w", err)
	}
	return oldValue.ForecastedApr, nil
}

// ClearForecastedApr clears the value of the "forecasted_apr" field.
func (m *ProjectMutation) ClearForecastedApr() {
	m.forecasted_apr = nil
	m.clearedFields[project.FieldForecastedApr] = struct{}{}
}

// ForecastedAprCleared returns if the "forecasted_apr" field was cleared in this mutation.
func (m *ProjectMutation) ForecastedAprCleared() bool {
	_, ok := m.clearedFields[project.FieldForecastedApr]
	return ok
}

// ResetForecastedApr resets all changes to the "forecasted_apr" field.
func (m *ProjectMutation) ResetForecastedApr() {
	m.forecasted_apr = nil
	delete(m.clearedFields, project.FieldForecastedApr)
}

// SetTotalValue sets the "total_value" field.
func (m *ProjectMutation) SetTotalValue(s string) {
	m.total_value = &s
}

// TotalValue returns the value of the "total_value" field in the mutation.
func (m *ProjectMutation) TotalValue() (r string, exists bool) {
	v := m.total_value
	if v == nil {
		return
	}
	return *v, true
}

// OldTotalValue returns the old "total_value" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldTotalValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotalValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotalValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotalValue: %w", err)
	}
	return oldValue.TotalValue, nil
}

// ResetTotalValue resets all changes to the "total_value" field.
func (m *ProjectMutation) ResetTotalValue() {
	m.total_value = nil
}

// SetPaymentToken sets the "payment_token" field.
func (m *ProjectMutation) SetPaymentToken(st schema.PaymentToken) {
	m.payment_token = &st
}

// PaymentToken returns the value of the "payment_token" field in the mutation.
func (m *ProjectMutation) PaymentToken() (r schema.PaymentToken, exists bool) {
	v := m.payment_token
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentToken returns the old "payment_token" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldPaymentToken(ctx context.Context) (v schema.PaymentToken, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentToken: %w", err)
	}
	return oldValue.PaymentToken, nil
}

// ResetPaymentToken resets all changes to the "payment_token" field.
func (m *ProjectMutation) ResetPaymentToken() {
	m.payment_token = nil
}

// SetMetadata sets the "metadata" field.
func (m *ProjectMutation) SetMetadata(s schema.Metadata) {
	m.metadata = &s
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *ProjectMutation) Metadata() (r schema.Metadata, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldMetadata(ctx context.Context) (v schema.Metadata, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *ProjectMutation) ResetMetadata() {
	m.metadata = nil
}

// SetMintID sets the "mint" edge to the Mint entity by id.
func (m *ProjectMutation) SetMintID(id int) {
	m.mint = &id
}

// ClearMint clears the "mint" edge to the Mint entity.
func (m *ProjectMutation) ClearMint() {
	m.clearedmint = true
}

// MintCleared reports if the "mint" edge to the Mint entity was cleared.
func (m *ProjectMutation) MintCleared() bool {
	return m.clearedmint
}

// MintID returns the "mint" edge ID in the mutation.
func (m *ProjectMutation) MintID() (id int, exists bool) {
	if m.mint != nil {
		return *m.mint, true
	}
	return
}

// MintIDs returns the "mint" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MintID instead. It exists only for internal usage by the builders.
func (m *ProjectMutation) MintIDs() (ids []int) {
	if id := m.mint; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMint resets all changes to the "mint" edge.
func (m *ProjectMutation) ResetMint() {
	m.mint = nil
	m.clearedmint = false
}

// SetLaunchpadID sets the "launchpad" edge to the Launchpad entity by id.
func (m *ProjectMutation) SetLaunchpadID(id int) {
	m.launchpad = &id
}

// ClearLaunchpad clears the "launchpad" edge to the Launchpad entity.
func (m *ProjectMutation) ClearLaunchpad() {
	m.clearedlaunchpad = true
}

// LaunchpadCleared reports if the "launchpad" edge to the Launchpad entity was cleared.
func (m *ProjectMutation) LaunchpadCleared() bool {
	return m.clearedlaunchpad
}

// LaunchpadID returns the "launchpad" edge ID in the mutation.
func (m *ProjectMutation) LaunchpadID() (id int, exists bool) {
	if m.launchpad != nil {
		return *m.launchpad, true
	}
	return
}

// LaunchpadIDs returns the "launchpad" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// LaunchpadID instead. It exists only for internal usage by the builders.
func (m *ProjectMutation) LaunchpadIDs() (ids []int) {
	if id := m.launchpad; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetLaunchpad resets all changes to the "launchpad" edge.
func (m *ProjectMutation) ResetLaunchpad() {
	m.launchpad = nil
	m.clearedlaunchpad = false
}

// Where appends a list predicates to the ProjectMutation builder.
func (m *ProjectMutation) Where(ps ...predicate.Project) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProjectMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProjectMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Project, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProjectMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProjectMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Project).
func (m *ProjectMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProjectMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.address != nil {
		fields = append(fields, project.FieldAddress)
	}
	if m.slot != nil {
		fields = append(fields, project.FieldSlot)
	}
	if m.name != nil {
		fields = append(fields, project.FieldName)
	}
	if m.slug != nil {
		fields = append(fields, project.FieldSlug)
	}
	if m.value_decimal != nil {
		fields = append(fields, project.FieldValueDecimal)
	}
	if m.forecasted_apr != nil {
		fields = append(fields, project.FieldForecastedApr)
	}
	if m.total_value != nil {
		fields = append(fields, project.FieldTotalValue)
	}
	if m.payment_token != nil {
		fields = append(fields, project.FieldPaymentToken)
	}
	if m.metadata != nil {
		fields = append(fields, project.FieldMetadata)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProjectMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case project.FieldAddress:
		return m.Address()
	case project.FieldSlot:
		return m.Slot()
	case project.FieldName:
		return m.Name()
	case project.FieldSlug:
		return m.Slug()
	case project.FieldValueDecimal:
		return m.ValueDecimal()
	case project.FieldForecastedApr:
		return m.ForecastedApr()
	case project.FieldTotalValue:
		return m.TotalValue()
	case project.FieldPaymentToken:
		return m.PaymentToken()
	case project.FieldMetadata:
		return m.Metadata()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProjectMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case project.FieldAddress:
		return m.OldAddress(ctx)
	case project.FieldSlot:
		return m.OldSlot(ctx)
	case project.FieldName:
		return m.OldName(ctx)
	case project.FieldSlug:
		return m.OldSlug(ctx)
	case project.FieldValueDecimal:
		return m.OldValueDecimal(ctx)
	case project.FieldForecastedApr:
		return m.OldForecastedApr(ctx)
	case project.FieldTotalValue:
		return m.OldTotalValue(ctx)
	case project.FieldPaymentToken:
		return m.OldPaymentToken(ctx)
	case project.FieldMetadata:
		return m.OldMetadata(ctx)
	}
	return nil, fmt.Errorf("unknown Project field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectMutation) SetField(name string, value ent.Value) error {
	switch name {
	case project.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case project.FieldSlot:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSlot(v)
		return nil
	case project.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case project.FieldSlug:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSlug(v)
		return nil
	case project.FieldValueDecimal:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValueDecimal(v)
		return nil
	case project.FieldForecastedApr:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetForecastedApr(v)
		return nil
	case project.FieldTotalValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotalValue(v)
		return nil
	case project.FieldPaymentToken:
		v, ok := value.(schema.PaymentToken)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentToken(v)
		return nil
	case project.FieldMetadata:
		v, ok := value.(schema.Metadata)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	}
	return fmt.Errorf("unknown Project field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProjectMutation) AddedFields() []string {
	var fields []string
	if m.addslot != nil {
		fields = append(fields, project.FieldSlot)
	}
	if m.addvalue_decimal != nil {
		fields = append(fields, project.FieldValueDecimal)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProjectMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case project.FieldSlot:
		return m.AddedSlot()
	case project.FieldValueDecimal:
		return m.AddedValueDecimal()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectMutation) AddField(name string, value ent.Value) error {
	switch name {
	case project.FieldSlot:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSlot(v)
		return nil
	case project.FieldValueDecimal:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddValueDecimal(v)
		return nil
	}
	return fmt.Errorf("unknown Project numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProjectMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(project.FieldForecastedApr) {
		fields = append(fields, project.FieldForecastedApr)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProjectMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProjectMutation) ClearField(name string) error {
	switch name {
	case project.FieldForecastedApr:
		m.ClearForecastedApr()
		return nil
	}
	return fmt.Errorf("unknown Project nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProjectMutation) ResetField(name string) error {
	switch name {
	case project.FieldAddress:
		m.ResetAddress()
		return nil
	case project.FieldSlot:
		m.ResetSlot()
		return nil
	case project.FieldName:
		m.ResetName()
		return nil
	case project.FieldSlug:
		m.ResetSlug()
		return nil
	case project.FieldValueDecimal:
		m.ResetValueDecimal()
		return nil
	case project.FieldForecastedApr:
		m.ResetForecastedApr()
		return nil
	case project.FieldTotalValue:
		m.ResetTotalValue()
		return nil
	case project.FieldPaymentToken:
		m.ResetPaymentToken()
		return nil
	case project.FieldMetadata:
		m.ResetMetadata()
		return nil
	}
	return fmt.Errorf("unknown Project field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProjectMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.mint != nil {
		edges = append(edges, project.EdgeMint)
	}
	if m.launchpad != nil {
		edges = append(edges, project.EdgeLaunchpad)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProjectMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case project.EdgeMint:
		if id := m.mint; id != nil {
			return []ent.Value{*id}
		}
	case project.EdgeLaunchpad:
		if id := m.launchpad; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProjectMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProjectMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProjectMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedmint {
		edges = append(edges, project.EdgeMint)
	}
	if m.clearedlaunchpad {
		edges = append(edges, project.EdgeLaunchpad)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProjectMutation) EdgeCleared(name string) bool {
	switch name {
	case project.EdgeMint:
		return m.clearedmint
	case project.EdgeLaunchpad:
		return m.clearedlaunchpad
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProjectMutation) ClearEdge(name string) error {
	switch name {
	case project.EdgeMint:
		m.ClearMint()
		return nil
	case project.EdgeLaunchpad:
		m.ClearLaunchpad()
		return nil
	}
	return fmt.Errorf("unknown Project unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProjectMutation) ResetEdge(name string) error {
	switch name {
	case project.EdgeMint:
		m.ResetMint()
		return nil
	case project.EdgeLaunchpad:
		m.ResetLaunchpad()
		return nil
	}
	return fmt.Errorf("unknown Project edge %s", name)
}
