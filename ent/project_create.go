// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/carbonable/carbonable-launchpad-backend/ent/launchpad"
	"github.com/carbonable/carbonable-launchpad-backend/ent/mint"
	"github.com/carbonable/carbonable-launchpad-backend/ent/project"
	"github.com/carbonable/carbonable-launchpad-backend/ent/schema"
)

// ProjectCreate is the builder for creating a Project entity.
type ProjectCreate struct {
	config
	mutation *ProjectMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAddress sets the "address" field.
func (pc *ProjectCreate) SetAddress(s string) *ProjectCreate {
	pc.mutation.SetAddress(s)
	return pc
}

// SetSlot sets the "slot" field.
func (pc *ProjectCreate) SetSlot(i int) *ProjectCreate {
	pc.mutation.SetSlot(i)
	return pc
}

// SetName sets the "name" field.
func (pc *ProjectCreate) SetName(s string) *ProjectCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetSlug sets the "slug" field.
func (pc *ProjectCreate) SetSlug(s string) *ProjectCreate {
	pc.mutation.SetSlug(s)
	return pc
}

// SetValueDecimal sets the "value_decimal" field.
func (pc *ProjectCreate) SetValueDecimal(i int) *ProjectCreate {
	pc.mutation.SetValueDecimal(i)
	return pc
}

// SetForecastedApr sets the "forecasted_apr" field.
func (pc *ProjectCreate) SetForecastedApr(s string) *ProjectCreate {
	pc.mutation.SetForecastedApr(s)
	return pc
}

// SetNillableForecastedApr sets the "forecasted_apr" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableForecastedApr(s *string) *ProjectCreate {
	if s != nil {
		pc.SetForecastedApr(*s)
	}
	return pc
}

// SetTotalValue sets the "total_value" field.
func (pc *ProjectCreate) SetTotalValue(s string) *ProjectCreate {
	pc.mutation.SetTotalValue(s)
	return pc
}

// SetPaymentToken sets the "payment_token" field.
func (pc *ProjectCreate) SetPaymentToken(st schema.PaymentToken) *ProjectCreate {
	pc.mutation.SetPaymentToken(st)
	return pc
}

// SetMetadata sets the "metadata" field.
func (pc *ProjectCreate) SetMetadata(s schema.Metadata) *ProjectCreate {
	pc.mutation.SetMetadata(s)
	return pc
}

// SetMintID sets the "mint" edge to the Mint entity by ID.
func (pc *ProjectCreate) SetMintID(id int) *ProjectCreate {
	pc.mutation.SetMintID(id)
	return pc
}

// SetNillableMintID sets the "mint" edge to the Mint entity by ID if the given value is not nil.
func (pc *ProjectCreate) SetNillableMintID(id *int) *ProjectCreate {
	if id != nil {
		pc = pc.SetMintID(*id)
	}
	return pc
}

// SetMint sets the "mint" edge to the Mint entity.
func (pc *ProjectCreate) SetMint(m *Mint) *ProjectCreate {
	return pc.SetMintID(m.ID)
}

// SetLaunchpadID sets the "launchpad" edge to the Launchpad entity by ID.
func (pc *ProjectCreate) SetLaunchpadID(id int) *ProjectCreate {
	pc.mutation.SetLaunchpadID(id)
	return pc
}

// SetNillableLaunchpadID sets the "launchpad" edge to the Launchpad entity by ID if the given value is not nil.
func (pc *ProjectCreate) SetNillableLaunchpadID(id *int) *ProjectCreate {
	if id != nil {
		pc = pc.SetLaunchpadID(*id)
	}
	return pc
}

// SetLaunchpad sets the "launchpad" edge to the Launchpad entity.
func (pc *ProjectCreate) SetLaunchpad(l *Launchpad) *ProjectCreate {
	return pc.SetLaunchpadID(l.ID)
}

// Mutation returns the ProjectMutation object of the builder.
func (pc *ProjectCreate) Mutation() *ProjectMutation {
	return pc.mutation
}

// Save creates the Project in the database.
func (pc *ProjectCreate) Save(ctx context.Context) (*Project, error) {
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProjectCreate) SaveX(ctx context.Context) *Project {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProjectCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProjectCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProjectCreate) check() error {
	if _, ok := pc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "Project.address"`)}
	}
	if _, ok := pc.mutation.Slot(); !ok {
		return &ValidationError{Name: "slot", err: errors.New(`ent: missing required field "Project.slot"`)}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Project.name"`)}
	}
	if _, ok := pc.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "Project.slug"`)}
	}
	if _, ok := pc.mutation.ValueDecimal(); !ok {
		return &ValidationError{Name: "value_decimal", err: errors.New(`ent: missing required field "Project.value_decimal"`)}
	}
	if _, ok := pc.mutation.TotalValue(); !ok {
		return &ValidationError{Name: "total_value", err: errors.New(`ent: missing required field "Project.total_value"`)}
	}
	if _, ok := pc.mutation.PaymentToken(); !ok {
		return &ValidationError{Name: "payment_token", err: errors.New(`ent: missing required field "Project.payment_token"`)}
	}
	if _, ok := pc.mutation.Metadata(); !ok {
		return &ValidationError{Name: "metadata", err: errors.New(`ent: missing required field "Project.metadata"`)}
	}
	return nil
}

func (pc *ProjectCreate) sqlSave(ctx context.Context) (*Project, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProjectCreate) createSpec() (*Project, *sqlgraph.CreateSpec) {
	var (
		_node = &Project{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(project.Table, sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt))
	)
	_spec.OnConflict = pc.conflict
	if value, ok := pc.mutation.Address(); ok {
		_spec.SetField(project.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := pc.mutation.Slot(); ok {
		_spec.SetField(project.FieldSlot, field.TypeInt, value)
		_node.Slot = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(project.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.Slug(); ok {
		_spec.SetField(project.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := pc.mutation.ValueDecimal(); ok {
		_spec.SetField(project.FieldValueDecimal, field.TypeInt, value)
		_node.ValueDecimal = value
	}
	if value, ok := pc.mutation.ForecastedApr(); ok {
		_spec.SetField(project.FieldForecastedApr, field.TypeString, value)
		_node.ForecastedApr = value
	}
	if value, ok := pc.mutation.TotalValue(); ok {
		_spec.SetField(project.FieldTotalValue, field.TypeString, value)
		_node.TotalValue = value
	}
	if value, ok := pc.mutation.PaymentToken(); ok {
		_spec.SetField(project.FieldPaymentToken, field.TypeJSON, value)
		_node.PaymentToken = value
	}
	if value, ok := pc.mutation.Metadata(); ok {
		_spec.SetField(project.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if nodes := pc.mutation.MintIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   project.MintTable,
			Columns: []string{project.MintColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mint.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.LaunchpadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   project.LaunchpadTable,
			Columns: []string{project.LaunchpadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(launchpad.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Project.Create().
//		SetAddress(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProjectUpsert) {
//			SetAddress(v+v).
//		}).
//		Exec(ctx)
func (pc *ProjectCreate) OnConflict(opts ...sql.ConflictOption) *ProjectUpsertOne {
	pc.conflict = opts
	return &ProjectUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Project.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *ProjectCreate) OnConflictColumns(columns ...string) *ProjectUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &ProjectUpsertOne{
		create: pc,
	}
}

type (
	// ProjectUpsertOne is the builder for "upsert"-ing
	//  one Project node.
	ProjectUpsertOne struct {
		create *ProjectCreate
	}

	// ProjectUpsert is the "OnConflict" setter.
	ProjectUpsert struct {
		*sql.UpdateSet
	}
)

// SetAddress sets the "address" field.
func (u *ProjectUpsert) SetAddress(v string) *ProjectUpsert {
	u.Set(project.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateAddress() *ProjectUpsert {
	u.SetExcluded(project.FieldAddress)
	return u
}

// SetSlot sets the "slot" field.
func (u *ProjectUpsert) SetSlot(v int) *ProjectUpsert {
	u.Set(project.FieldSlot, v)
	return u
}

// UpdateSlot sets the "slot" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateSlot() *ProjectUpsert {
	u.SetExcluded(project.FieldSlot)
	return u
}

// AddSlot adds v to the "slot" field.
func (u *ProjectUpsert) AddSlot(v int) *ProjectUpsert {
	u.Add(project.FieldSlot, v)
	return u
}

// SetName sets the "name" field.
func (u *ProjectUpsert) SetName(v string) *ProjectUpsert {
	u.Set(project.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateName() *ProjectUpsert {
	u.SetExcluded(project.FieldName)
	return u
}

// SetSlug sets the "slug" field.
func (u *ProjectUpsert) SetSlug(v string) *ProjectUpsert {
	u.Set(project.FieldSlug, v)
	return u
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateSlug() *ProjectUpsert {
	u.SetExcluded(project.FieldSlug)
	return u
}

// SetValueDecimal sets the "value_decimal" field.
func (u *ProjectUpsert) SetValueDecimal(v int) *ProjectUpsert {
	u.Set(project.FieldValueDecimal, v)
	return u
}

// UpdateValueDecimal sets the "value_decimal" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateValueDecimal() *ProjectUpsert {
	u.SetExcluded(project.FieldValueDecimal)
	return u
}

// AddValueDecimal adds v to the "value_decimal" field.
func (u *ProjectUpsert) AddValueDecimal(v int) *ProjectUpsert {
	u.Add(project.FieldValueDecimal, v)
	return u
}

// SetForecastedApr sets the "forecasted_apr" field.
func (u *ProjectUpsert) SetForecastedApr(v string) *ProjectUpsert {
	u.Set(project.FieldForecastedApr, v)
	return u
}

// UpdateForecastedApr sets the "forecasted_apr" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateForecastedApr() *ProjectUpsert {
	u.SetExcluded(project.FieldForecastedApr)
	return u
}

// ClearForecastedApr clears the value of the "forecasted_apr" field.
func (u *ProjectUpsert) ClearForecastedApr() *ProjectUpsert {
	u.SetNull(project.FieldForecastedApr)
	return u
}

// SetTotalValue sets the "total_value" field.
func (u *ProjectUpsert) SetTotalValue(v string) *ProjectUpsert {
	u.Set(project.FieldTotalValue, v)
	return u
}

// UpdateTotalValue sets the "total_value" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateTotalValue() *ProjectUpsert {
	u.SetExcluded(project.FieldTotalValue)
	return u
}

// SetPaymentToken sets the "payment_token" field.
func (u *ProjectUpsert) SetPaymentToken(v schema.PaymentToken) *ProjectUpsert {
	u.Set(project.FieldPaymentToken, v)
	return u
}

// UpdatePaymentToken sets the "payment_token" field to the value that was provided on create.
func (u *ProjectUpsert) UpdatePaymentToken() *ProjectUpsert {
	u.SetExcluded(project.FieldPaymentToken)
	return u
}

// SetMetadata sets the "metadata" field.
func (u *ProjectUpsert) SetMetadata(v schema.Metadata) *ProjectUpsert {
	u.Set(project.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateMetadata() *ProjectUpsert {
	u.SetExcluded(project.FieldMetadata)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Project.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ProjectUpsertOne) UpdateNewValues() *ProjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Project.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ProjectUpsertOne) Ignore() *ProjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProjectUpsertOne) DoNothing() *ProjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProjectCreate.OnConflict
// documentation for more info.
func (u *ProjectUpsertOne) Update(set func(*ProjectUpsert)) *ProjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProjectUpsert{UpdateSet: update})
	}))
	return u
}

// SetAddress sets the "address" field.
func (u *ProjectUpsertOne) SetAddress(v string) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateAddress() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateAddress()
	})
}

// SetSlot sets the "slot" field.
func (u *ProjectUpsertOne) SetSlot(v int) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetSlot(v)
	})
}

// AddSlot adds v to the "slot" field.
func (u *ProjectUpsertOne) AddSlot(v int) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddSlot(v)
	})
}

// UpdateSlot sets the "slot" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateSlot() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateSlot()
	})
}

// SetName sets the "name" field.
func (u *ProjectUpsertOne) SetName(v string) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateName() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateName()
	})
}

// SetSlug sets the "slug" field.
func (u *ProjectUpsertOne) SetSlug(v string) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateSlug() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateSlug()
	})
}

// SetValueDecimal sets the "value_decimal" field.
func (u *ProjectUpsertOne) SetValueDecimal(v int) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetValueDecimal(v)
	})
}

// AddValueDecimal adds v to the "value_decimal" field.
func (u *ProjectUpsertOne) AddValueDecimal(v int) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.AddValueDecimal(v)
	})
}

// UpdateValueDecimal sets the "value_decimal" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateValueDecimal() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateValueDecimal()
	})
}

// SetForecastedApr sets the "forecasted_apr" field.
func (u *ProjectUpsertOne) SetForecastedApr(v string) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetForecastedApr(v)
	})
}

// UpdateForecastedApr sets the "forecasted_apr" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateForecastedApr() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateForecastedApr()
	})
}

// ClearForecastedApr clears the value of the "forecasted_apr" field.
func (u *ProjectUpsertOne) ClearForecastedApr() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearForecastedApr()
	})
}

// SetTotalValue sets the "total_value" field.
func (u *ProjectUpsertOne) SetTotalValue(v string) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetTotalValue(v)
	})
}

// UpdateTotalValue sets the "total_value" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateTotalValue() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateTotalValue()
	})
}

// SetPaymentToken sets the "payment_token" field.
func (u *ProjectUpsertOne) SetPaymentToken(v schema.PaymentToken) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetPaymentToken(v)
	})
}

// UpdatePaymentToken sets the "payment_token" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdatePaymentToken() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdatePaymentToken()
	})
}

// SetMetadata sets the "metadata" field.
func (u *ProjectUpsertOne) SetMetadata(v schema.Metadata) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateMetadata() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateMetadata()
	})
}

// Exec executes the query.
func (u *ProjectUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProjectCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProjectUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ProjectUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ProjectUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ProjectCreateBulk is the builder for creating many Project entities in bulk.
type ProjectCreateBulk struct {
	config
	err      error
	builders []*ProjectCreate
	conflict []sql.ConflictOption
}

// Save creates the Project entities in the database.
func (pcb *ProjectCreateBulk) Save(ctx context.Context) ([]*Project, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Project, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProjectMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProjectCreateBulk) SaveX(ctx context.Context) []*Project {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProjectCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProjectCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Project.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProjectUpsert) {
//			SetAddress(v+v).
//		}).
//		Exec(ctx)
func (pcb *ProjectCreateBulk) OnConflict(opts ...sql.ConflictOption) *ProjectUpsertBulk {
	pcb.conflict = opts
	return &ProjectUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Project.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *ProjectCreateBulk) OnConflictColumns(columns ...string) *ProjectUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &ProjectUpsertBulk{
		create: pcb,
	}
}

// ProjectUpsertBulk is the builder for "upsert"-ing
// a bulk of Project nodes.
type ProjectUpsertBulk struct {
	create *ProjectCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Project.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ProjectUpsertBulk) UpdateNewValues() *ProjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Project.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ProjectUpsertBulk) Ignore() *ProjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProjectUpsertBulk) DoNothing() *ProjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProjectCreateBulk.OnConflict
// documentation for more info.
func (u *ProjectUpsertBulk) Update(set func(*ProjectUpsert)) *ProjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProjectUpsert{UpdateSet: update})
	}))
	return u
}

// SetAddress sets the "address" field.
func (u *ProjectUpsertBulk) SetAddress(v string) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateAddress() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateAddress()
	})
}

// SetSlot sets the "slot" field.
func (u *ProjectUpsertBulk) SetSlot(v int) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetSlot(v)
	})
}

// AddSlot adds v to the "slot" field.
func (u *ProjectUpsertBulk) AddSlot(v int) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddSlot(v)
	})
}

// UpdateSlot sets the "slot" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateSlot() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateSlot()
	})
}

// SetName sets the "name" field.
func (u *ProjectUpsertBulk) SetName(v string) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateName() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateName()
	})
}

// SetSlug sets the "slug" field.
func (u *ProjectUpsertBulk) SetSlug(v string) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateSlug() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateSlug()
	})
}

// SetValueDecimal sets the "value_decimal" field.
func (u *ProjectUpsertBulk) SetValueDecimal(v int) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetValueDecimal(v)
	})
}

// AddValueDecimal adds v to the "value_decimal" field.
func (u *ProjectUpsertBulk) AddValueDecimal(v int) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.AddValueDecimal(v)
	})
}

// UpdateValueDecimal sets the "value_decimal" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateValueDecimal() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateValueDecimal()
	})
}

// SetForecastedApr sets the "forecasted_apr" field.
func (u *ProjectUpsertBulk) SetForecastedApr(v string) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetForecastedApr(v)
	})
}

// UpdateForecastedApr sets the "forecasted_apr" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateForecastedApr() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateForecastedApr()
	})
}

// ClearForecastedApr clears the value of the "forecasted_apr" field.
func (u *ProjectUpsertBulk) ClearForecastedApr() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearForecastedApr()
	})
}

// SetTotalValue sets the "total_value" field.
func (u *ProjectUpsertBulk) SetTotalValue(v string) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetTotalValue(v)
	})
}

// UpdateTotalValue sets the "total_value" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateTotalValue() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateTotalValue()
	})
}

// SetPaymentToken sets the "payment_token" field.
func (u *ProjectUpsertBulk) SetPaymentToken(v schema.PaymentToken) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetPaymentToken(v)
	})
}

// UpdatePaymentToken sets the "payment_token" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdatePaymentToken() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdatePaymentToken()
	})
}

// SetMetadata sets the "metadata" field.
func (u *ProjectUpsertBulk) SetMetadata(v schema.Metadata) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateMetadata() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateMetadata()
	})
}

// Exec executes the query.
func (u *ProjectUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ProjectCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProjectCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProjectUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
