// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/carbonable/carbonable-launchpad-backend/ent/mint"
	"github.com/carbonable/carbonable-launchpad-backend/ent/project"
)

// MintCreate is the builder for creating a Mint entity.
type MintCreate struct {
	config
	mutation *MintMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetMinValuePerTx sets the "min_value_per_tx" field.
func (mc *MintCreate) SetMinValuePerTx(s string) *MintCreate {
	mc.mutation.SetMinValuePerTx(s)
	return mc
}

// SetMaxValuePerTx sets the "max_value_per_tx" field.
func (mc *MintCreate) SetMaxValuePerTx(s string) *MintCreate {
	mc.mutation.SetMaxValuePerTx(s)
	return mc
}

// SetMinterAddress sets the "minter_address" field.
func (mc *MintCreate) SetMinterAddress(s string) *MintCreate {
	mc.mutation.SetMinterAddress(s)
	return mc
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (mc *MintCreate) SetProjectID(id int) *MintCreate {
	mc.mutation.SetProjectID(id)
	return mc
}

// SetProject sets the "project" edge to the Project entity.
func (mc *MintCreate) SetProject(p *Project) *MintCreate {
	return mc.SetProjectID(p.ID)
}

// Mutation returns the MintMutation object of the builder.
func (mc *MintCreate) Mutation() *MintMutation {
	return mc.mutation
}

// Save creates the Mint in the database.
func (mc *MintCreate) Save(ctx context.Context) (*Mint, error) {
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MintCreate) SaveX(ctx context.Context) *Mint {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MintCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MintCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MintCreate) check() error {
	if _, ok := mc.mutation.MinValuePerTx(); !ok {
		return &ValidationError{Name: "min_value_per_tx", err: errors.New(`ent: missing required field "Mint.min_value_per_tx"`)}
	}
	if _, ok := mc.mutation.MaxValuePerTx(); !ok {
		return &ValidationError{Name: "max_value_per_tx", err: errors.New(`ent: missing required field "Mint.max_value_per_tx"`)}
	}
	if _, ok := mc.mutation.MinterAddress(); !ok {
		return &ValidationError{Name: "minter_address", err: errors.New(`ent: missing required field "Mint.minter_address"`)}
	}
	if _, ok := mc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project", err: errors.New(`ent: missing required edge "Mint.project"`)}
	}
	return nil
}

func (mc *MintCreate) sqlSave(ctx context.Context) (*Mint, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MintCreate) createSpec() (*Mint, *sqlgraph.CreateSpec) {
	var (
		_node = &Mint{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(mint.Table, sqlgraph.NewFieldSpec(mint.FieldID, field.TypeInt))
	)
	_spec.OnConflict = mc.conflict
	if value, ok := mc.mutation.MinValuePerTx(); ok {
		_spec.SetField(mint.FieldMinValuePerTx, field.TypeString, value)
		_node.MinValuePerTx = value
	}
	if value, ok := mc.mutation.MaxValuePerTx(); ok {
		_spec.SetField(mint.FieldMaxValuePerTx, field.TypeString, value)
		_node.MaxValuePerTx = value
	}
	if value, ok := mc.mutation.MinterAddress(); ok {
		_spec.SetField(mint.FieldMinterAddress, field.TypeString, value)
		_node.MinterAddress = value
	}
	if nodes := mc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   mint.ProjectTable,
			Columns: []string{mint.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.project_mint = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Mint.Create().
//		SetMinValuePerTx(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MintUpsert) {
//			SetMinValuePerTx(v+v).
//		}).
//		Exec(ctx)
func (mc *MintCreate) OnConflict(opts ...sql.ConflictOption) *MintUpsertOne {
	mc.conflict = opts
	return &MintUpsertOne{
		create: mc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Mint.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mc *MintCreate) OnConflictColumns(columns ...string) *MintUpsertOne {
	mc.conflict = append(mc.conflict, sql.ConflictColumns(columns...))
	return &MintUpsertOne{
		create: mc,
	}
}

type (
	// MintUpsertOne is the builder for "upsert"-ing
	//  one Mint node.
	MintUpsertOne struct {
		create *MintCreate
	}

	// MintUpsert is the "OnConflict" setter.
	MintUpsert struct {
		*sql.UpdateSet
	}
)

// SetMinValuePerTx sets the "min_value_per_tx" field.
func (u *MintUpsert) SetMinValuePerTx(v string) *MintUpsert {
	u.Set(mint.FieldMinValuePerTx, v)
	return u
}

// UpdateMinValuePerTx sets the "min_value_per_tx" field to the value that was provided on create.
func (u *MintUpsert) UpdateMinValuePerTx() *MintUpsert {
	u.SetExcluded(mint.FieldMinValuePerTx)
	return u
}

// SetMaxValuePerTx sets the "max_value_per_tx" field.
func (u *MintUpsert) SetMaxValuePerTx(v string) *MintUpsert {
	u.Set(mint.FieldMaxValuePerTx, v)
	return u
}

// UpdateMaxValuePerTx sets the "max_value_per_tx" field to the value that was provided on create.
func (u *MintUpsert) UpdateMaxValuePerTx() *MintUpsert {
	u.SetExcluded(mint.FieldMaxValuePerTx)
	return u
}

// SetMinterAddress sets the "minter_address" field.
func (u *MintUpsert) SetMinterAddress(v string) *MintUpsert {
	u.Set(mint.FieldMinterAddress, v)
	return u
}

// UpdateMinterAddress sets the "minter_address" field to the value that was provided on create.
func (u *MintUpsert) UpdateMinterAddress() *MintUpsert {
	u.SetExcluded(mint.FieldMinterAddress)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Mint.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *MintUpsertOne) UpdateNewValues() *MintUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Mint.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MintUpsertOne) Ignore() *MintUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MintUpsertOne) DoNothing() *MintUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MintCreate.OnConflict
// documentation for more info.
func (u *MintUpsertOne) Update(set func(*MintUpsert)) *MintUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MintUpsert{UpdateSet: update})
	}))
	return u
}

// SetMinValuePerTx sets the "min_value_per_tx" field.
func (u *MintUpsertOne) SetMinValuePerTx(v string) *MintUpsertOne {
	return u.Update(func(s *MintUpsert) {
		s.SetMinValuePerTx(v)
	})
}

// UpdateMinValuePerTx sets the "min_value_per_tx" field to the value that was provided on create.
func (u *MintUpsertOne) UpdateMinValuePerTx() *MintUpsertOne {
	return u.Update(func(s *MintUpsert) {
		s.UpdateMinValuePerTx()
	})
}

// SetMaxValuePerTx sets the "max_value_per_tx" field.
func (u *MintUpsertOne) SetMaxValuePerTx(v string) *MintUpsertOne {
	return u.Update(func(s *MintUpsert) {
		s.SetMaxValuePerTx(v)
	})
}

// UpdateMaxValuePerTx sets the "max_value_per_tx" field to the value that was provided on create.
func (u *MintUpsertOne) UpdateMaxValuePerTx() *MintUpsertOne {
	return u.Update(func(s *MintUpsert) {
		s.UpdateMaxValuePerTx()
	})
}

// SetMinterAddress sets the "minter_address" field.
func (u *MintUpsertOne) SetMinterAddress(v string) *MintUpsertOne {
	return u.Update(func(s *MintUpsert) {
		s.SetMinterAddress(v)
	})
}

// UpdateMinterAddress sets the "minter_address" field to the value that was provided on create.
func (u *MintUpsertOne) UpdateMinterAddress() *MintUpsertOne {
	return u.Update(func(s *MintUpsert) {
		s.UpdateMinterAddress()
	})
}

// Exec executes the query.
func (u *MintUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MintCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MintUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MintUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MintUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MintCreateBulk is the builder for creating many Mint entities in bulk.
type MintCreateBulk struct {
	config
	err      error
	builders []*MintCreate
	conflict []sql.ConflictOption
}

// Save creates the Mint entities in the database.
func (mcb *MintCreateBulk) Save(ctx context.Context) ([]*Mint, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Mint, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MintMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MintCreateBulk) SaveX(ctx context.Context) []*Mint {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MintCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MintCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Mint.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MintUpsert) {
//			SetMinValuePerTx(v+v).
//		}).
//		Exec(ctx)
func (mcb *MintCreateBulk) OnConflict(opts ...sql.ConflictOption) *MintUpsertBulk {
	mcb.conflict = opts
	return &MintUpsertBulk{
		create: mcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Mint.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mcb *MintCreateBulk) OnConflictColumns(columns ...string) *MintUpsertBulk {
	mcb.conflict = append(mcb.conflict, sql.ConflictColumns(columns...))
	return &MintUpsertBulk{
		create: mcb,
	}
}

// MintUpsertBulk is the builder for "upsert"-ing
// a bulk of Mint nodes.
type MintUpsertBulk struct {
	create *MintCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Mint.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *MintUpsertBulk) UpdateNewValues() *MintUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Mint.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MintUpsertBulk) Ignore() *MintUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MintUpsertBulk) DoNothing() *MintUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MintCreateBulk.OnConflict
// documentation for more info.
func (u *MintUpsertBulk) Update(set func(*MintUpsert)) *MintUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MintUpsert{UpdateSet: update})
	}))
	return u
}

// SetMinValuePerTx sets the "min_value_per_tx" field.
func (u *MintUpsertBulk) SetMinValuePerTx(v string) *MintUpsertBulk {
	return u.Update(func(s *MintUpsert) {
		s.SetMinValuePerTx(v)
	})
}

// UpdateMinValuePerTx sets the "min_value_per_tx" field to the value that was provided on create.
func (u *MintUpsertBulk) UpdateMinValuePerTx() *MintUpsertBulk {
	return u.Update(func(s *MintUpsert) {
		s.UpdateMinValuePerTx()
	})
}

// SetMaxValuePerTx sets the "max_value_per_tx" field.
func (u *MintUpsertBulk) SetMaxValuePerTx(v string) *MintUpsertBulk {
	return u.Update(func(s *MintUpsert) {
		s.SetMaxValuePerTx(v)
	})
}

// UpdateMaxValuePerTx sets the "max_value_per_tx" field to the value that was provided on create.
func (u *MintUpsertBulk) UpdateMaxValuePerTx() *MintUpsertBulk {
	return u.Update(func(s *MintUpsert) {
		s.UpdateMaxValuePerTx()
	})
}

// SetMinterAddress sets the "minter_address" field.
func (u *MintUpsertBulk) SetMinterAddress(v string) *MintUpsertBulk {
	return u.Update(func(s *MintUpsert) {
		s.SetMinterAddress(v)
	})
}

// UpdateMinterAddress sets the "minter_address" field to the value that was provided on create.
func (u *MintUpsertBulk) UpdateMinterAddress() *MintUpsertBulk {
	return u.Update(func(s *MintUpsert) {
		s.UpdateMinterAddress()
	})
}

// Exec executes the query.
func (u *MintUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MintCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MintCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MintUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
