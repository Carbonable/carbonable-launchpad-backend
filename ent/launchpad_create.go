// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/carbonable/carbonable-launchpad-backend/ent/launchpad"
	"github.com/carbonable/carbonable-launchpad-backend/ent/project"
	"github.com/carbonable/carbonable-launchpad-backend/ent/schema"
)

// LaunchpadCreate is the builder for creating a Launchpad entity.
type LaunchpadCreate struct {
	config
	mutation *LaunchpadMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetIsReady sets the "is_ready" field.
func (lc *LaunchpadCreate) SetIsReady(b bool) *LaunchpadCreate {
	lc.mutation.SetIsReady(b)
	return lc
}

// SetNillableIsReady sets the "is_ready" field if the given value is not nil.
func (lc *LaunchpadCreate) SetNillableIsReady(b *bool) *LaunchpadCreate {
	if b != nil {
		lc.SetIsReady(*b)
	}
	return lc
}

// SetMinterContract sets the "minter_contract" field.
func (lc *LaunchpadCreate) SetMinterContract(sc schema.MinterContract) *LaunchpadCreate {
	lc.mutation.SetMinterContract(sc)
	return lc
}

// SetWhitelistedSaleOpen sets the "whitelisted_sale_open" field.
func (lc *LaunchpadCreate) SetWhitelistedSaleOpen(b bool) *LaunchpadCreate {
	lc.mutation.SetWhitelistedSaleOpen(b)
	return lc
}

// SetNillableWhitelistedSaleOpen sets the "whitelisted_sale_open" field if the given value is not nil.
func (lc *LaunchpadCreate) SetNillableWhitelistedSaleOpen(b *bool) *LaunchpadCreate {
	if b != nil {
		lc.SetWhitelistedSaleOpen(*b)
	}
	return lc
}

// SetPublicSaleOpen sets the "public_sale_open" field.
func (lc *LaunchpadCreate) SetPublicSaleOpen(b bool) *LaunchpadCreate {
	lc.mutation.SetPublicSaleOpen(b)
	return lc
}

// SetNillablePublicSaleOpen sets the "public_sale_open" field if the given value is not nil.
func (lc *LaunchpadCreate) SetNillablePublicSaleOpen(b *bool) *LaunchpadCreate {
	if b != nil {
		lc.SetPublicSaleOpen(*b)
	}
	return lc
}

// SetIsSoldOut sets the "is_sold_out" field.
func (lc *LaunchpadCreate) SetIsSoldOut(b bool) *LaunchpadCreate {
	lc.mutation.SetIsSoldOut(b)
	return lc
}

// SetNillableIsSoldOut sets the "is_sold_out" field if the given value is not nil.
func (lc *LaunchpadCreate) SetNillableIsSoldOut(b *bool) *LaunchpadCreate {
	if b != nil {
		lc.SetIsSoldOut(*b)
	}
	return lc
}

// SetIsCanceled sets the "is_canceled" field.
func (lc *LaunchpadCreate) SetIsCanceled(b bool) *LaunchpadCreate {
	lc.mutation.SetIsCanceled(b)
	return lc
}

// SetNillableIsCanceled sets the "is_canceled" field if the given value is not nil.
func (lc *LaunchpadCreate) SetNillableIsCanceled(b *bool) *LaunchpadCreate {
	if b != nil {
		lc.SetIsCanceled(*b)
	}
	return lc
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (lc *LaunchpadCreate) SetProjectID(id int) *LaunchpadCreate {
	lc.mutation.SetProjectID(id)
	return lc
}

// SetProject sets the "project" edge to the Project entity.
func (lc *LaunchpadCreate) SetProject(p *Project) *LaunchpadCreate {
	return lc.SetProjectID(p.ID)
}

// Mutation returns the LaunchpadMutation object of the builder.
func (lc *LaunchpadCreate) Mutation() *LaunchpadMutation {
	return lc.mutation
}

// Save creates the Launchpad in the database.
func (lc *LaunchpadCreate) Save(ctx context.Context) (*Launchpad, error) {
	lc.defaults()
	return withHooks(ctx, lc.sqlSave, lc.mutation, lc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LaunchpadCreate) SaveX(ctx context.Context) *Launchpad {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *LaunchpadCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *LaunchpadCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lc *LaunchpadCreate) defaults() {
	if _, ok := lc.mutation.IsReady(); !ok {
		v := launchpad.DefaultIsReady
		lc.mutation.SetIsReady(v)
	}
	if _, ok := lc.mutation.WhitelistedSaleOpen(); !ok {
		v := launchpad.DefaultWhitelistedSaleOpen
		lc.mutation.SetWhitelistedSaleOpen(v)
	}
	if _, ok := lc.mutation.PublicSaleOpen(); !ok {
		v := launchpad.DefaultPublicSaleOpen
		lc.mutation.SetPublicSaleOpen(v)
	}
	if _, ok := lc.mutation.IsSoldOut(); !ok {
		v := launchpad.DefaultIsSoldOut
		lc.mutation.SetIsSoldOut(v)
	}
	if _, ok := lc.mutation.IsCanceled(); !ok {
		v := launchpad.DefaultIsCanceled
		lc.mutation.SetIsCanceled(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lc *LaunchpadCreate) check() error {
	if _, ok := lc.mutation.IsReady(); !ok {
		return &ValidationError{Name: "is_ready", err: errors.New(`ent: missing required field "Launchpad.is_ready"`)}
	}
	if _, ok := lc.mutation.MinterContract(); !ok {
		return &ValidationError{Name: "minter_contract", err: errors.New(`ent: missing required field "Launchpad.minter_contract"`)}
	}
	if _, ok := lc.mutation.WhitelistedSaleOpen(); !ok {
		return &ValidationError{Name: "whitelisted_sale_open", err: errors.New(`ent: missing required field "Launchpad.whitelisted_sale_open"`)}
	}
	if _, ok := lc.mutation.PublicSaleOpen(); !ok {
		return &ValidationError{Name: "public_sale_open", err: errors.New(`ent: missing required field "Launchpad.public_sale_open"`)}
	}
	if _, ok := lc.mutation.IsSoldOut(); !ok {
		return &ValidationError{Name: "is_sold_out", err: errors.New(`ent: missing required field "Launchpad.is_sold_out"`)}
	}
	if _, ok := lc.mutation.IsCanceled(); !ok {
		return &ValidationError{Name: "is_canceled", err: errors.New(`ent: missing required field "Launchpad.is_canceled"`)}
	}
	if _, ok := lc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project", err: errors.New(`ent: missing required edge "Launchpad.project"`)}
	}
	return nil
}

func (lc *LaunchpadCreate) sqlSave(ctx context.Context) (*Launchpad, error) {
	if err := lc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	lc.mutation.id = &_node.ID
	lc.mutation.done = true
	return _node, nil
}

func (lc *LaunchpadCreate) createSpec() (*Launchpad, *sqlgraph.CreateSpec) {
	var (
		_node = &Launchpad{config: lc.config}
		_spec = sqlgraph.NewCreateSpec(launchpad.Table, sqlgraph.NewFieldSpec(launchpad.FieldID, field.TypeInt))
	)
	_spec.OnConflict = lc.conflict
	if value, ok := lc.mutation.IsReady(); ok {
		_spec.SetField(launchpad.FieldIsReady, field.TypeBool, value)
		_node.IsReady = value
	}
	if value, ok := lc.mutation.MinterContract(); ok {
		_spec.SetField(launchpad.FieldMinterContract, field.TypeJSON, value)
		_node.MinterContract = value
	}
	if value, ok := lc.mutation.WhitelistedSaleOpen(); ok {
		_spec.SetField(launchpad.FieldWhitelistedSaleOpen, field.TypeBool, value)
		_node.WhitelistedSaleOpen = value
	}
	if value, ok := lc.mutation.PublicSaleOpen(); ok {
		_spec.SetField(launchpad.FieldPublicSaleOpen, field.TypeBool, value)
		_node.PublicSaleOpen = value
	}
	if value, ok := lc.mutation.IsSoldOut(); ok {
		_spec.SetField(launchpad.FieldIsSoldOut, field.TypeBool, value)
		_node.IsSoldOut = value
	}
	if value, ok := lc.mutation.IsCanceled(); ok {
		_spec.SetField(launchpad.FieldIsCanceled, field.TypeBool, value)
		_node.IsCanceled = value
	}
	if nodes := lc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   launchpad.ProjectTable,
			Columns: []string{launchpad.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.project_launchpad = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Launchpad.Create().
//		SetIsReady(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LaunchpadUpsert) {
//			SetIsReady(v+v).
//		}).
//		Exec(ctx)
func (lc *LaunchpadCreate) OnConflict(opts ...sql.ConflictOption) *LaunchpadUpsertOne {
	lc.conflict = opts
	return &LaunchpadUpsertOne{
		create: lc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Launchpad.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lc *LaunchpadCreate) OnConflictColumns(columns ...string) *LaunchpadUpsertOne {
	lc.conflict = append(lc.conflict, sql.ConflictColumns(columns...))
	return &LaunchpadUpsertOne{
		create: lc,
	}
}

type (
	// LaunchpadUpsertOne is the builder for "upsert"-ing
	//  one Launchpad node.
	LaunchpadUpsertOne struct {
		create *LaunchpadCreate
	}

	// LaunchpadUpsert is the "OnConflict" setter.
	LaunchpadUpsert struct {
		*sql.UpdateSet
	}
)

// SetIsReady sets the "is_ready" field.
func (u *LaunchpadUpsert) SetIsReady(v bool) *LaunchpadUpsert {
	u.Set(launchpad.FieldIsReady, v)
	return u
}

// UpdateIsReady sets the "is_ready" field to the value that was provided on create.
func (u *LaunchpadUpsert) UpdateIsReady() *LaunchpadUpsert {
	u.SetExcluded(launchpad.FieldIsReady)
	return u
}

// SetMinterContract sets the "minter_contract" field.
func (u *LaunchpadUpsert) SetMinterContract(v schema.MinterContract) *LaunchpadUpsert {
	u.Set(launchpad.FieldMinterContract, v)
	return u
}

// UpdateMinterContract sets the "minter_contract" field to the value that was provided on create.
func (u *LaunchpadUpsert) UpdateMinterContract() *LaunchpadUpsert {
	u.SetExcluded(launchpad.FieldMinterContract)
	return u
}

// SetWhitelistedSaleOpen sets the "whitelisted_sale_open" field.
func (u *LaunchpadUpsert) SetWhitelistedSaleOpen(v bool) *LaunchpadUpsert {
	u.Set(launchpad.FieldWhitelistedSaleOpen, v)
	return u
}

// UpdateWhitelistedSaleOpen sets the "whitelisted_sale_open" field to the value that was provided on create.
func (u *LaunchpadUpsert) UpdateWhitelistedSaleOpen() *LaunchpadUpsert {
	u.SetExcluded(launchpad.FieldWhitelistedSaleOpen)
	return u
}

// SetPublicSaleOpen sets the "public_sale_open" field.
func (u *LaunchpadUpsert) SetPublicSaleOpen(v bool) *LaunchpadUpsert {
	u.Set(launchpad.FieldPublicSaleOpen, v)
	return u
}

// UpdatePublicSaleOpen sets the "public_sale_open" field to the value that was provided on create.
func (u *LaunchpadUpsert) UpdatePublicSaleOpen() *LaunchpadUpsert {
	u.SetExcluded(launchpad.FieldPublicSaleOpen)
	return u
}

// SetIsSoldOut sets the "is_sold_out" field.
func (u *LaunchpadUpsert) SetIsSoldOut(v bool) *LaunchpadUpsert {
	u.Set(launchpad.FieldIsSoldOut, v)
	return u
}

// UpdateIsSoldOut sets the "is_sold_out" field to the value that was provided on create.
func (u *LaunchpadUpsert) UpdateIsSoldOut() *LaunchpadUpsert {
	u.SetExcluded(launchpad.FieldIsSoldOut)
	return u
}

// SetIsCanceled sets the "is_canceled" field.
func (u *LaunchpadUpsert) SetIsCanceled(v bool) *LaunchpadUpsert {
	u.Set(launchpad.FieldIsCanceled, v)
	return u
}

// UpdateIsCanceled sets the "is_canceled" field to the value that was provided on create.
func (u *LaunchpadUpsert) UpdateIsCanceled() *LaunchpadUpsert {
	u.SetExcluded(launchpad.FieldIsCanceled)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Launchpad.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *LaunchpadUpsertOne) UpdateNewValues() *LaunchpadUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Launchpad.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *LaunchpadUpsertOne) Ignore() *LaunchpadUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LaunchpadUpsertOne) DoNothing() *LaunchpadUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LaunchpadCreate.OnConflict
// documentation for more info.
func (u *LaunchpadUpsertOne) Update(set func(*LaunchpadUpsert)) *LaunchpadUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LaunchpadUpsert{UpdateSet: update})
	}))
	return u
}

// SetIsReady sets the "is_ready" field.
func (u *LaunchpadUpsertOne) SetIsReady(v bool) *LaunchpadUpsertOne {
	return u.Update(func(s *LaunchpadUpsert) {
		s.SetIsReady(v)
	})
}

// UpdateIsReady sets the "is_ready" field to the value that was provided on create.
func (u *LaunchpadUpsertOne) UpdateIsReady() *LaunchpadUpsertOne {
	return u.Update(func(s *LaunchpadUpsert) {
		s.UpdateIsReady()
	})
}

// SetMinterContract sets the "minter_contract" field.
func (u *LaunchpadUpsertOne) SetMinterContract(v schema.MinterContract) *LaunchpadUpsertOne {
	return u.Update(func(s *LaunchpadUpsert) {
		s.SetMinterContract(v)
	})
}

// UpdateMinterContract sets the "minter_contract" field to the value that was provided on create.
func (u *LaunchpadUpsertOne) UpdateMinterContract() *LaunchpadUpsertOne {
	return u.Update(func(s *LaunchpadUpsert) {
		s.UpdateMinterContract()
	})
}

// SetWhitelistedSaleOpen sets the "whitelisted_sale_open" field.
func (u *LaunchpadUpsertOne) SetWhitelistedSaleOpen(v bool) *LaunchpadUpsertOne {
	return u.Update(func(s *LaunchpadUpsert) {
		s.SetWhitelistedSaleOpen(v)
	})
}

// UpdateWhitelistedSaleOpen sets the "whitelisted_sale_open" field to the value that was provided on create.
func (u *LaunchpadUpsertOne) UpdateWhitelistedSaleOpen() *LaunchpadUpsertOne {
	return u.Update(func(s *LaunchpadUpsert) {
		s.UpdateWhitelistedSaleOpen()
	})
}

// SetPublicSaleOpen sets the "public_sale_open" field.
func (u *LaunchpadUpsertOne) SetPublicSaleOpen(v bool) *LaunchpadUpsertOne {
	return u.Update(func(s *LaunchpadUpsert) {
		s.SetPublicSaleOpen(v)
	})
}

// UpdatePublicSaleOpen sets the "public_sale_open" field to the value that was provided on create.
func (u *LaunchpadUpsertOne) UpdatePublicSaleOpen() *LaunchpadUpsertOne {
	return u.Update(func(s *LaunchpadUpsert) {
		s.UpdatePublicSaleOpen()
	})
}

// SetIsSoldOut sets the "is_sold_out" field.
func (u *LaunchpadUpsertOne) SetIsSoldOut(v bool) *LaunchpadUpsertOne {
	return u.Update(func(s *LaunchpadUpsert) {
		s.SetIsSoldOut(v)
	})
}

// UpdateIsSoldOut sets the "is_sold_out" field to the value that was provided on create.
func (u *LaunchpadUpsertOne) UpdateIsSoldOut() *LaunchpadUpsertOne {
	return u.Update(func(s *LaunchpadUpsert) {
		s.UpdateIsSoldOut()
	})
}

// SetIsCanceled sets the "is_canceled" field.
func (u *LaunchpadUpsertOne) SetIsCanceled(v bool) *LaunchpadUpsertOne {
	return u.Update(func(s *LaunchpadUpsert) {
		s.SetIsCanceled(v)
	})
}

// UpdateIsCanceled sets the "is_canceled" field to the value that was provided on create.
func (u *LaunchpadUpsertOne) UpdateIsCanceled() *LaunchpadUpsertOne {
	return u.Update(func(s *LaunchpadUpsert) {
		s.UpdateIsCanceled()
	})
}

// Exec executes the query.
func (u *LaunchpadUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LaunchpadCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LaunchpadUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LaunchpadUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LaunchpadUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LaunchpadCreateBulk is the builder for creating many Launchpad entities in bulk.
type LaunchpadCreateBulk struct {
	config
	err      error
	builders []*LaunchpadCreate
	conflict []sql.ConflictOption
}

// Save creates the Launchpad entities in the database.
func (lcb *LaunchpadCreateBulk) Save(ctx context.Context) ([]*Launchpad, error) {
	if lcb.err != nil {
		return nil, lcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*Launchpad, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LaunchpadMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = lcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LaunchpadCreateBulk) SaveX(ctx context.Context) []*Launchpad {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *LaunchpadCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *LaunchpadCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Launchpad.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LaunchpadUpsert) {
//			SetIsReady(v+v).
//		}).
//		Exec(ctx)
func (lcb *LaunchpadCreateBulk) OnConflict(opts ...sql.ConflictOption) *LaunchpadUpsertBulk {
	lcb.conflict = opts
	return &LaunchpadUpsertBulk{
		create: lcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Launchpad.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lcb *LaunchpadCreateBulk) OnConflictColumns(columns ...string) *LaunchpadUpsertBulk {
	lcb.conflict = append(lcb.conflict, sql.ConflictColumns(columns...))
	return &LaunchpadUpsertBulk{
		create: lcb,
	}
}

// LaunchpadUpsertBulk is the builder for "upsert"-ing
// a bulk of Launchpad nodes.
type LaunchpadUpsertBulk struct {
	create *LaunchpadCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Launchpad.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *LaunchpadUpsertBulk) UpdateNewValues() *LaunchpadUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Launchpad.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *LaunchpadUpsertBulk) Ignore() *LaunchpadUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LaunchpadUpsertBulk) DoNothing() *LaunchpadUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LaunchpadCreateBulk.OnConflict
// documentation for more info.
func (u *LaunchpadUpsertBulk) Update(set func(*LaunchpadUpsert)) *LaunchpadUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LaunchpadUpsert{UpdateSet: update})
	}))
	return u
}

// SetIsReady sets the "is_ready" field.
func (u *LaunchpadUpsertBulk) SetIsReady(v bool) *LaunchpadUpsertBulk {
	return u.Update(func(s *LaunchpadUpsert) {
		s.SetIsReady(v)
	})
}

// UpdateIsReady sets the "is_ready" field to the value that was provided on create.
func (u *LaunchpadUpsertBulk) UpdateIsReady() *LaunchpadUpsertBulk {
	return u.Update(func(s *LaunchpadUpsert) {
		s.UpdateIsReady()
	})
}

// SetMinterContract sets the "minter_contract" field.
func (u *LaunchpadUpsertBulk) SetMinterContract(v schema.MinterContract) *LaunchpadUpsertBulk {
	return u.Update(func(s *LaunchpadUpsert) {
		s.SetMinterContract(v)
	})
}

// UpdateMinterContract sets the "minter_contract" field to the value that was provided on create.
func (u *LaunchpadUpsertBulk) UpdateMinterContract() *LaunchpadUpsertBulk {
	return u.Update(func(s *LaunchpadUpsert) {
		s.UpdateMinterContract()
	})
}

// SetWhitelistedSaleOpen sets the "whitelisted_sale_open" field.
func (u *LaunchpadUpsertBulk) SetWhitelistedSaleOpen(v bool) *LaunchpadUpsertBulk {
	return u.Update(func(s *LaunchpadUpsert) {
		s.SetWhitelistedSaleOpen(v)
	})
}

// UpdateWhitelistedSaleOpen sets the "whitelisted_sale_open" field to the value that was provided on create.
func (u *LaunchpadUpsertBulk) UpdateWhitelistedSaleOpen() *LaunchpadUpsertBulk {
	return u.Update(func(s *LaunchpadUpsert) {
		s.UpdateWhitelistedSaleOpen()
	})
}

// SetPublicSaleOpen sets the "public_sale_open" field.
func (u *LaunchpadUpsertBulk) SetPublicSaleOpen(v bool) *LaunchpadUpsertBulk {
	return u.Update(func(s *LaunchpadUpsert) {
		s.SetPublicSaleOpen(v)
	})
}

// UpdatePublicSaleOpen sets the "public_sale_open" field to the value that was provided on create.
func (u *LaunchpadUpsertBulk) UpdatePublicSaleOpen() *LaunchpadUpsertBulk {
	return u.Update(func(s *LaunchpadUpsert) {
		s.UpdatePublicSaleOpen()
	})
}

// SetIsSoldOut sets the "is_sold_out" field.
func (u *LaunchpadUpsertBulk) SetIsSoldOut(v bool) *LaunchpadUpsertBulk {
	return u.Update(func(s *LaunchpadUpsert) {
		s.SetIsSoldOut(v)
	})
}

// UpdateIsSoldOut sets the "is_sold_out" field to the value that was provided on create.
func (u *LaunchpadUpsertBulk) UpdateIsSoldOut() *LaunchpadUpsertBulk {
	return u.Update(func(s *LaunchpadUpsert) {
		s.UpdateIsSoldOut()
	})
}

// SetIsCanceled sets the "is_canceled" field.
func (u *LaunchpadUpsertBulk) SetIsCanceled(v bool) *LaunchpadUpsertBulk {
	return u.Update(func(s *LaunchpadUpsert) {
		s.SetIsCanceled(v)
	})
}

// UpdateIsCanceled sets the "is_canceled" field to the value that was provided on create.
func (u *LaunchpadUpsertBulk) UpdateIsCanceled() *LaunchpadUpsertBulk {
	return u.Update(func(s *LaunchpadUpsert) {
		s.UpdateIsCanceled()
	})
}

// Exec executes the query.
func (u *LaunchpadUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the LaunchpadCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LaunchpadCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LaunchpadUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
