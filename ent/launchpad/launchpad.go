// Code generated by ent, DO NOT EDIT.

package launchpad

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the launchpad type in the database.
	Label = "launchpad"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIsReady holds the string denoting the is_ready field in the database.
	FieldIsReady = "is_ready"
	// FieldMinterContract holds the string denoting the minter_contract field in the database.
	FieldMinterContract = "minter_contract"
	// FieldWhitelistedSaleOpen holds the string denoting the whitelisted_sale_open field in the database.
	FieldWhitelistedSaleOpen = "whitelisted_sale_open"
	// FieldPublicSaleOpen holds the string denoting the public_sale_open field in the database.
	FieldPublicSaleOpen = "public_sale_open"
	// FieldIsSoldOut holds the string denoting the is_sold_out field in the database.
	FieldIsSoldOut = "is_sold_out"
	// FieldIsCanceled holds the string denoting the is_canceled field in the database.
	FieldIsCanceled = "is_canceled"
	// EdgeProject holds the string denoting the project edge name in mutations.
	EdgeProject = "project"
	// Table holds the table name of the launchpad in the database.
	Table = "launchpads"
	// ProjectTable is the table that holds the project relation/edge.
	ProjectTable = "launchpads"
	// ProjectInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	ProjectInverseTable = "projects"
	// ProjectColumn is the table column denoting the project relation/edge.
	ProjectColumn = "project_launchpad"
)

// Columns holds all SQL columns for launchpad fields.
var Columns = []string{
	FieldID,
	FieldIsReady,
	FieldMinterContract,
	FieldWhitelistedSaleOpen,
	FieldPublicSaleOpen,
	FieldIsSoldOut,
	FieldIsCanceled,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "launchpads"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"project_launchpad",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsReady holds the default value on creation for the "is_ready" field.
	DefaultIsReady bool
	// DefaultWhitelistedSaleOpen holds the default value on creation for the "whitelisted_sale_open" field.
	DefaultWhitelistedSaleOpen bool
	// DefaultPublicSaleOpen holds the default value on creation for the "public_sale_open" field.
	DefaultPublicSaleOpen bool
	// DefaultIsSoldOut holds the default value on creation for the "is_sold_out" field.
	DefaultIsSoldOut bool
	// DefaultIsCanceled holds the default value on creation for the "is_canceled" field.
	DefaultIsCanceled bool
)

// OrderOption defines the ordering options for the Launchpad queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIsReady orders the results by the is_ready field.
func ByIsReady(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsReady, opts...).ToFunc()
}

// ByWhitelistedSaleOpen orders the results by the whitelisted_sale_open field.
func ByWhitelistedSaleOpen(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWhitelistedSaleOpen, opts...).ToFunc()
}

// ByPublicSaleOpen orders the results by the public_sale_open field.
func ByPublicSaleOpen(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublicSaleOpen, opts...).ToFunc()
}

// ByIsSoldOut orders the results by the is_sold_out field.
func ByIsSoldOut(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsSoldOut, opts...).ToFunc()
}

// ByIsCanceled orders the results by the is_canceled field.
func ByIsCanceled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsCanceled, opts...).ToFunc()
}

// ByProjectField orders the results by project field.
func ByProjectField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProjectStep(), sql.OrderByField(field, opts...))
	}
}
func newProjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProjectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ProjectTable, ProjectColumn),
	)
}
