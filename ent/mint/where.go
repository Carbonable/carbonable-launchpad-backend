// Code generated by ent, DO NOT EDIT.

package mint

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/carbonable/carbonable-launchpad-backend/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Mint {
	return predicate.Mint(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Mint {
	return predicate.Mint(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Mint {
	return predicate.Mint(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Mint {
	return predicate.Mint(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Mint {
	return predicate.Mint(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Mint {
	return predicate.Mint(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Mint {
	return predicate.Mint(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Mint {
	return predicate.Mint(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Mint {
	return predicate.Mint(sql.FieldLTE(FieldID, id))
}

// MinValuePerTx applies equality check predicate on the "min_value_per_tx" field. It's identical to MinValuePerTxEQ.
func MinValuePerTx(v string) predicate.Mint {
	return predicate.Mint(sql.FieldEQ(FieldMinValuePerTx, v))
}

// MaxValuePerTx applies equality check predicate on the "max_value_per_tx" field. It's identical to MaxValuePerTxEQ.
func MaxValuePerTx(v string) predicate.Mint {
	return predicate.Mint(sql.FieldEQ(FieldMaxValuePerTx, v))
}

// MinterAddress applies equality check predicate on the "minter_address" field. It's identical to MinterAddressEQ.
func MinterAddress(v string) predicate.Mint {
	return predicate.Mint(sql.FieldEQ(FieldMinterAddress, v))
}

// MinValuePerTxEQ applies the EQ predicate on the "min_value_per_tx" field.
func MinValuePerTxEQ(v string) predicate.Mint {
	return predicate.Mint(sql.FieldEQ(FieldMinValuePerTx, v))
}

// MinValuePerTxNEQ applies the NEQ predicate on the "min_value_per_tx" field.
func MinValuePerTxNEQ(v string) predicate.Mint {
	return predicate.Mint(sql.FieldNEQ(FieldMinValuePerTx, v))
}

// MinValuePerTxIn applies the In predicate on the "min_value_per_tx" field.
func MinValuePerTxIn(vs ...string) predicate.Mint {
	return predicate.Mint(sql.FieldIn(FieldMinValuePerTx, vs...))
}

// MinValuePerTxNotIn applies the NotIn predicate on the "min_value_per_tx" field.
func MinValuePerTxNotIn(vs ...string) predicate.Mint {
	return predicate.Mint(sql.FieldNotIn(FieldMinValuePerTx, vs...))
}

// MinValuePerTxGT applies the GT predicate on the "min_value_per_tx" field.
func MinValuePerTxGT(v string) predicate.Mint {
	return predicate.Mint(sql.FieldGT(FieldMinValuePerTx, v))
}

// MinValuePerTxGTE applies the GTE predicate on the "min_value_per_tx" field.
func MinValuePerTxGTE(v string) predicate.Mint {
	return predicate.Mint(sql.FieldGTE(FieldMinValuePerTx, v))
}

// MinValuePerTxLT applies the LT predicate on the "min_value_per_tx" field.
func MinValuePerTxLT(v string) predicate.Mint {
	return predicate.Mint(sql.FieldLT(FieldMinValuePerTx, v))
}

// MinValuePerTxLTE applies the LTE predicate on the "min_value_per_tx" field.
func MinValuePerTxLTE(v string) predicate.Mint {
	return predicate.Mint(sql.FieldLTE(FieldMinValuePerTx, v))
}

// MinValuePerTxContains applies the Contains predicate on the "min_value_per_tx" field.
func MinValuePerTxContains(v string) predicate.Mint {
	return predicate.Mint(sql.FieldContains(FieldMinValuePerTx, v))
}

// MinValuePerTxHasPrefix applies the HasPrefix predicate on the "min_value_per_tx" field.
func MinValuePerTxHasPrefix(v string) predicate.Mint {
	return predicate.Mint(sql.FieldHasPrefix(FieldMinValuePerTx, v))
}

// MinValuePerTxHasSuffix applies the HasSuffix predicate on the "min_value_per_tx" field.
func MinValuePerTxHasSuffix(v string) predicate.Mint {
	return predicate.Mint(sql.FieldHasSuffix(FieldMinValuePerTx, v))
}

// MinValuePerTxEqualFold applies the EqualFold predicate on the "min_value_per_tx" field.
func MinValuePerTxEqualFold(v string) predicate.Mint {
	return predicate.Mint(sql.FieldEqualFold(FieldMinValuePerTx, v))
}

// MinValuePerTxContainsFold applies the ContainsFold predicate on the "min_value_per_tx" field.
func MinValuePerTxContainsFold(v string) predicate.Mint {
	return predicate.Mint(sql.FieldContainsFold(FieldMinValuePerTx, v))
}

// MaxValuePerTxEQ applies the EQ predicate on the "max_value_per_tx" field.
func MaxValuePerTxEQ(v string) predicate.Mint {
	return predicate.Mint(sql.FieldEQ(FieldMaxValuePerTx, v))
}

// MaxValuePerTxNEQ applies the NEQ predicate on the "max_value_per_tx" field.
func MaxValuePerTxNEQ(v string) predicate.Mint {
	return predicate.Mint(sql.FieldNEQ(FieldMaxValuePerTx, v))
}

// MaxValuePerTxIn applies the In predicate on the "max_value_per_tx" field.
func MaxValuePerTxIn(vs ...string) predicate.Mint {
	return predicate.Mint(sql.FieldIn(FieldMaxValuePerTx, vs...))
}

// MaxValuePerTxNotIn applies the NotIn predicate on the "max_value_per_tx" field.
func MaxValuePerTxNotIn(vs ...string) predicate.Mint {
	return predicate.Mint(sql.FieldNotIn(FieldMaxValuePerTx, vs...))
}

// MaxValuePerTxGT applies the GT predicate on the "max_value_per_tx" field.
func MaxValuePerTxGT(v string) predicate.Mint {
	return predicate.Mint(sql.FieldGT(FieldMaxValuePerTx, v))
}

// MaxValuePerTxGTE applies the GTE predicate on the "max_value_per_tx" field.
func MaxValuePerTxGTE(v string) predicate.Mint {
	return predicate.Mint(sql.FieldGTE(FieldMaxValuePerTx, v))
}

// MaxValuePerTxLT applies the LT predicate on the "max_value_per_tx" field.
func MaxValuePerTxLT(v string) predicate.Mint {
	return predicate.Mint(sql.FieldLT(FieldMaxValuePerTx, v))
}

// MaxValuePerTxLTE applies the LTE predicate on the "max_value_per_tx" field.
func MaxValuePerTxLTE(v string) predicate.Mint {
	return predicate.Mint(sql.FieldLTE(FieldMaxValuePerTx, v))
}

// MaxValuePerTxContains applies the Contains predicate on the "max_value_per_tx" field.
func MaxValuePerTxContains(v string) predicate.Mint {
	return predicate.Mint(sql.FieldContains(FieldMaxValuePerTx, v))
}

// MaxValuePerTxHasPrefix applies the HasPrefix predicate on the "max_value_per_tx" field.
func MaxValuePerTxHasPrefix(v string) predicate.Mint {
	return predicate.Mint(sql.FieldHasPrefix(FieldMaxValuePerTx, v))
}

// MaxValuePerTxHasSuffix applies the HasSuffix predicate on the "max_value_per_tx" field.
func MaxValuePerTxHasSuffix(v string) predicate.Mint {
	return predicate.Mint(sql.FieldHasSuffix(FieldMaxValuePerTx, v))
}

// MaxValuePerTxEqualFold applies the EqualFold predicate on the "max_value_per_tx" field.
func MaxValuePerTxEqualFold(v string) predicate.Mint {
	return predicate.Mint(sql.FieldEqualFold(FieldMaxValuePerTx, v))
}

// MaxValuePerTxContainsFold applies the ContainsFold predicate on the "max_value_per_tx" field.
func MaxValuePerTxContainsFold(v string) predicate.Mint {
	return predicate.Mint(sql.FieldContainsFold(FieldMaxValuePerTx, v))
}

// MinterAddressEQ applies the EQ predicate on the "minter_address" field.
func MinterAddressEQ(v string) predicate.Mint {
	return predicate.Mint(sql.FieldEQ(FieldMinterAddress, v))
}

// MinterAddressNEQ applies the NEQ predicate on the "minter_address" field.
func MinterAddressNEQ(v string) predicate.Mint {
	return predicate.Mint(sql.FieldNEQ(FieldMinterAddress, v))
}

// MinterAddressIn applies the In predicate on the "minter_address" field.
func MinterAddressIn(vs ...string) predicate.Mint {
	return predicate.Mint(sql.FieldIn(FieldMinterAddress, vs...))
}

// MinterAddressNotIn applies the NotIn predicate on the "minter_address" field.
func MinterAddressNotIn(vs ...string) predicate.Mint {
	return predicate.Mint(sql.FieldNotIn(FieldMinterAddress, vs...))
}

// MinterAddressGT applies the GT predicate on the "minter_address" field.
func MinterAddressGT(v string) predicate.Mint {
	return predicate.Mint(sql.FieldGT(FieldMinterAddress, v))
}

// MinterAddressGTE applies the GTE predicate on the "minter_address" field.
func MinterAddressGTE(v string) predicate.Mint {
	return predicate.Mint(sql.FieldGTE(FieldMinterAddress, v))
}

// MinterAddressLT applies the LT predicate on the "minter_address" field.
func MinterAddressLT(v string) predicate.Mint {
	return predicate.Mint(sql.FieldLT(FieldMinterAddress, v))
}

// MinterAddressLTE applies the LTE predicate on the "minter_address" field.
func MinterAddressLTE(v string) predicate.Mint {
	return predicate.Mint(sql.FieldLTE(FieldMinterAddress, v))
}

// MinterAddressContains applies the Contains predicate on the "minter_address" field.
func MinterAddressContains(v string) predicate.Mint {
	return predicate.Mint(sql.FieldContains(FieldMinterAddress, v))
}

// MinterAddressHasPrefix applies the HasPrefix predicate on the "minter_address" field.
func MinterAddressHasPrefix(v string) predicate.Mint {
	return predicate.Mint(sql.FieldHasPrefix(FieldMinterAddress, v))
}

// MinterAddressHasSuffix applies the HasSuffix predicate on the "minter_address" field.
func MinterAddressHasSuffix(v string) predicate.Mint {
	return predicate.Mint(sql.FieldHasSuffix(FieldMinterAddress, v))
}

// MinterAddressEqualFold applies the EqualFold predicate on the "minter_address" field.
func MinterAddressEqualFold(v string) predicate.Mint {
	return predicate.Mint(sql.FieldEqualFold(FieldMinterAddress, v))
}

// MinterAddressContainsFold applies the ContainsFold predicate on the "minter_address" field.
func MinterAddressContainsFold(v string) predicate.Mint {
	return predicate.Mint(sql.FieldContainsFold(FieldMinterAddress, v))
}

// HasProject applies the HasEdge predicate on the "project" edge.
func HasProject() predicate.Mint {
	return predicate.Mint(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ProjectTable, ProjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectWith applies the HasEdge predicate on the "project" edge with a given conditions (other predicates).
func HasProjectWith(preds ...predicate.Project) predicate.Mint {
	return predicate.Mint(func(s *sql.Selector) {
		step := newProjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Mint) predicate.Mint {
	return predicate.Mint(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Mint) predicate.Mint {
	return predicate.Mint(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Mint) predicate.Mint {
	return predicate.Mint(sql.NotPredicates(p))
}
