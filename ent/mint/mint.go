// Code generated by ent, DO NOT EDIT.

package mint

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the mint type in the database.
	Label = "mint"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMinValuePerTx holds the string denoting the min_value_per_tx field in the database.
	FieldMinValuePerTx = "min_value_per_tx"
	// FieldMaxValuePerTx holds the string denoting the max_value_per_tx field in the database.
	FieldMaxValuePerTx = "max_value_per_tx"
	// FieldMinterAddress holds the string denoting the minter_address field in the database.
	FieldMinterAddress = "minter_address"
	// EdgeProject holds the string denoting the project edge name in mutations.
	EdgeProject = "project"
	// Table holds the table name of the mint in the database.
	Table = "mints"
	// ProjectTable is the table that holds the project relation/edge.
	ProjectTable = "mints"
	// ProjectInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	ProjectInverseTable = "projects"
	// ProjectColumn is the table column denoting the project relation/edge.
	ProjectColumn = "project_mint"
)

// Columns holds all SQL columns for mint fields.
var Columns = []string{
	FieldID,
	FieldMinValuePerTx,
	FieldMaxValuePerTx,
	FieldMinterAddress,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "mints"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"project_mint",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Mint queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByMinValuePerTx orders the results by the min_value_per_tx field.
func ByMinValuePerTx(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinValuePerTx, opts...).ToFunc()
}

// ByMaxValuePerTx orders the results by the max_value_per_tx field.
func ByMaxValuePerTx(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxValuePerTx, opts...).ToFunc()
}

// ByMinterAddress orders the results by the minter_address field.
func ByMinterAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinterAddress, opts...).ToFunc()
}

// ByProjectField orders the results by project field.
func ByProjectField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProjectStep(), sql.OrderByField(field, opts...))
	}
}
func newProjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProjectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ProjectTable, ProjectColumn),
	)
}
