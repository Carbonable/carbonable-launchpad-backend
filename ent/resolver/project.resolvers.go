package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"

	"github.com/carbonable/carbonable-launchpad-backend/ent/gql"
	"github.com/carbonable/carbonable-launchpad-backend/ent/project"
	"github.com/carbonable/carbonable-launchpad-backend/ent/schema"
)

// Ha is the resolver for the ha field.
func (r *milestoneResolver) Ha(ctx context.Context, obj *schema.Milestone) (string, error) {
	return string(obj.Area), nil
}

// Ton is the resolver for the ton field.
func (r *milestoneResolver) Ton(ctx context.Context, obj *schema.Milestone) (string, error) {
	return string(obj.TonPrice), nil
}

// List is the resolver for the list field.
func (r *queryResolver) List(ctx context.Context) ([]*gql.ProjectDetails, error) {
	p, err := r.Client.Project.Query().All(ctx)
	if err != nil {
		return nil, err
	}
	var res []*gql.ProjectDetails
	for _, v := range p {
		res = append(res, &gql.ProjectDetails{
			Project:   v,
			Mint:      v.QueryMint().FirstX(ctx),
			Launchpad: v.QueryLaunchpad().FirstX(ctx),
		})
	}
	return res, nil
}

// Details is the resolver for the details field.
func (r *queryResolver) Details(ctx context.Context, slug string) (*gql.ProjectDetails, error) {
	p, err := r.Client.Project.Query().Where(project.SlugEQ(slug)).First(ctx)
	if err != nil {
		return nil, err
	}
	return &gql.ProjectDetails{
		Project:   p,
		Mint:      p.QueryMint().FirstX(ctx),
		Launchpad: p.QueryLaunchpad().FirstX(ctx),
	}, nil
}

// Milestone returns gql.MilestoneResolver implementation.
func (r *Resolver) Milestone() gql.MilestoneResolver { return &milestoneResolver{r} }

type milestoneResolver struct{ *Resolver }
