// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/carbonable/carbonable-launchpad-backend/ent/launchpad"
	"github.com/carbonable/carbonable-launchpad-backend/ent/predicate"
	"github.com/carbonable/carbonable-launchpad-backend/ent/project"
	"github.com/carbonable/carbonable-launchpad-backend/ent/schema"
)

// LaunchpadUpdate is the builder for updating Launchpad entities.
type LaunchpadUpdate struct {
	config
	hooks    []Hook
	mutation *LaunchpadMutation
}

// Where appends a list predicates to the LaunchpadUpdate builder.
func (lu *LaunchpadUpdate) Where(ps ...predicate.Launchpad) *LaunchpadUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetIsReady sets the "is_ready" field.
func (lu *LaunchpadUpdate) SetIsReady(b bool) *LaunchpadUpdate {
	lu.mutation.SetIsReady(b)
	return lu
}

// SetNillableIsReady sets the "is_ready" field if the given value is not nil.
func (lu *LaunchpadUpdate) SetNillableIsReady(b *bool) *LaunchpadUpdate {
	if b != nil {
		lu.SetIsReady(*b)
	}
	return lu
}

// SetMinterContract sets the "minter_contract" field.
func (lu *LaunchpadUpdate) SetMinterContract(sc schema.MinterContract) *LaunchpadUpdate {
	lu.mutation.SetMinterContract(sc)
	return lu
}

// SetNillableMinterContract sets the "minter_contract" field if the given value is not nil.
func (lu *LaunchpadUpdate) SetNillableMinterContract(sc *schema.MinterContract) *LaunchpadUpdate {
	if sc != nil {
		lu.SetMinterContract(*sc)
	}
	return lu
}

// SetWhitelistedSaleOpen sets the "whitelisted_sale_open" field.
func (lu *LaunchpadUpdate) SetWhitelistedSaleOpen(b bool) *LaunchpadUpdate {
	lu.mutation.SetWhitelistedSaleOpen(b)
	return lu
}

// SetNillableWhitelistedSaleOpen sets the "whitelisted_sale_open" field if the given value is not nil.
func (lu *LaunchpadUpdate) SetNillableWhitelistedSaleOpen(b *bool) *LaunchpadUpdate {
	if b != nil {
		lu.SetWhitelistedSaleOpen(*b)
	}
	return lu
}

// SetPublicSaleOpen sets the "public_sale_open" field.
func (lu *LaunchpadUpdate) SetPublicSaleOpen(b bool) *LaunchpadUpdate {
	lu.mutation.SetPublicSaleOpen(b)
	return lu
}

// SetNillablePublicSaleOpen sets the "public_sale_open" field if the given value is not nil.
func (lu *LaunchpadUpdate) SetNillablePublicSaleOpen(b *bool) *LaunchpadUpdate {
	if b != nil {
		lu.SetPublicSaleOpen(*b)
	}
	return lu
}

// SetIsSoldOut sets the "is_sold_out" field.
func (lu *LaunchpadUpdate) SetIsSoldOut(b bool) *LaunchpadUpdate {
	lu.mutation.SetIsSoldOut(b)
	return lu
}

// SetNillableIsSoldOut sets the "is_sold_out" field if the given value is not nil.
func (lu *LaunchpadUpdate) SetNillableIsSoldOut(b *bool) *LaunchpadUpdate {
	if b != nil {
		lu.SetIsSoldOut(*b)
	}
	return lu
}

// SetIsCanceled sets the "is_canceled" field.
func (lu *LaunchpadUpdate) SetIsCanceled(b bool) *LaunchpadUpdate {
	lu.mutation.SetIsCanceled(b)
	return lu
}

// SetNillableIsCanceled sets the "is_canceled" field if the given value is not nil.
func (lu *LaunchpadUpdate) SetNillableIsCanceled(b *bool) *LaunchpadUpdate {
	if b != nil {
		lu.SetIsCanceled(*b)
	}
	return lu
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (lu *LaunchpadUpdate) SetProjectID(id int) *LaunchpadUpdate {
	lu.mutation.SetProjectID(id)
	return lu
}

// SetProject sets the "project" edge to the Project entity.
func (lu *LaunchpadUpdate) SetProject(p *Project) *LaunchpadUpdate {
	return lu.SetProjectID(p.ID)
}

// Mutation returns the LaunchpadMutation object of the builder.
func (lu *LaunchpadUpdate) Mutation() *LaunchpadMutation {
	return lu.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (lu *LaunchpadUpdate) ClearProject() *LaunchpadUpdate {
	lu.mutation.ClearProject()
	return lu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LaunchpadUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, lu.sqlSave, lu.mutation, lu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LaunchpadUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LaunchpadUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LaunchpadUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lu *LaunchpadUpdate) check() error {
	if _, ok := lu.mutation.ProjectID(); lu.mutation.ProjectCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Launchpad.project"`)
	}
	return nil
}

func (lu *LaunchpadUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(launchpad.Table, launchpad.Columns, sqlgraph.NewFieldSpec(launchpad.FieldID, field.TypeInt))
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.IsReady(); ok {
		_spec.SetField(launchpad.FieldIsReady, field.TypeBool, value)
	}
	if value, ok := lu.mutation.MinterContract(); ok {
		_spec.SetField(launchpad.FieldMinterContract, field.TypeJSON, value)
	}
	if value, ok := lu.mutation.WhitelistedSaleOpen(); ok {
		_spec.SetField(launchpad.FieldWhitelistedSaleOpen, field.TypeBool, value)
	}
	if value, ok := lu.mutation.PublicSaleOpen(); ok {
		_spec.SetField(launchpad.FieldPublicSaleOpen, field.TypeBool, value)
	}
	if value, ok := lu.mutation.IsSoldOut(); ok {
		_spec.SetField(launchpad.FieldIsSoldOut, field.TypeBool, value)
	}
	if value, ok := lu.mutation.IsCanceled(); ok {
		_spec.SetField(launchpad.FieldIsCanceled, field.TypeBool, value)
	}
	if lu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   launchpad.ProjectTable,
			Columns: []string{launchpad.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   launchpad.ProjectTable,
			Columns: []string{launchpad.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{launchpad.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lu.mutation.done = true
	return n, nil
}

// LaunchpadUpdateOne is the builder for updating a single Launchpad entity.
type LaunchpadUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LaunchpadMutation
}

// SetIsReady sets the "is_ready" field.
func (luo *LaunchpadUpdateOne) SetIsReady(b bool) *LaunchpadUpdateOne {
	luo.mutation.SetIsReady(b)
	return luo
}

// SetNillableIsReady sets the "is_ready" field if the given value is not nil.
func (luo *LaunchpadUpdateOne) SetNillableIsReady(b *bool) *LaunchpadUpdateOne {
	if b != nil {
		luo.SetIsReady(*b)
	}
	return luo
}

// SetMinterContract sets the "minter_contract" field.
func (luo *LaunchpadUpdateOne) SetMinterContract(sc schema.MinterContract) *LaunchpadUpdateOne {
	luo.mutation.SetMinterContract(sc)
	return luo
}

// SetNillableMinterContract sets the "minter_contract" field if the given value is not nil.
func (luo *LaunchpadUpdateOne) SetNillableMinterContract(sc *schema.MinterContract) *LaunchpadUpdateOne {
	if sc != nil {
		luo.SetMinterContract(*sc)
	}
	return luo
}

// SetWhitelistedSaleOpen sets the "whitelisted_sale_open" field.
func (luo *LaunchpadUpdateOne) SetWhitelistedSaleOpen(b bool) *LaunchpadUpdateOne {
	luo.mutation.SetWhitelistedSaleOpen(b)
	return luo
}

// SetNillableWhitelistedSaleOpen sets the "whitelisted_sale_open" field if the given value is not nil.
func (luo *LaunchpadUpdateOne) SetNillableWhitelistedSaleOpen(b *bool) *LaunchpadUpdateOne {
	if b != nil {
		luo.SetWhitelistedSaleOpen(*b)
	}
	return luo
}

// SetPublicSaleOpen sets the "public_sale_open" field.
func (luo *LaunchpadUpdateOne) SetPublicSaleOpen(b bool) *LaunchpadUpdateOne {
	luo.mutation.SetPublicSaleOpen(b)
	return luo
}

// SetNillablePublicSaleOpen sets the "public_sale_open" field if the given value is not nil.
func (luo *LaunchpadUpdateOne) SetNillablePublicSaleOpen(b *bool) *LaunchpadUpdateOne {
	if b != nil {
		luo.SetPublicSaleOpen(*b)
	}
	return luo
}

// SetIsSoldOut sets the "is_sold_out" field.
func (luo *LaunchpadUpdateOne) SetIsSoldOut(b bool) *LaunchpadUpdateOne {
	luo.mutation.SetIsSoldOut(b)
	return luo
}

// SetNillableIsSoldOut sets the "is_sold_out" field if the given value is not nil.
func (luo *LaunchpadUpdateOne) SetNillableIsSoldOut(b *bool) *LaunchpadUpdateOne {
	if b != nil {
		luo.SetIsSoldOut(*b)
	}
	return luo
}

// SetIsCanceled sets the "is_canceled" field.
func (luo *LaunchpadUpdateOne) SetIsCanceled(b bool) *LaunchpadUpdateOne {
	luo.mutation.SetIsCanceled(b)
	return luo
}

// SetNillableIsCanceled sets the "is_canceled" field if the given value is not nil.
func (luo *LaunchpadUpdateOne) SetNillableIsCanceled(b *bool) *LaunchpadUpdateOne {
	if b != nil {
		luo.SetIsCanceled(*b)
	}
	return luo
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (luo *LaunchpadUpdateOne) SetProjectID(id int) *LaunchpadUpdateOne {
	luo.mutation.SetProjectID(id)
	return luo
}

// SetProject sets the "project" edge to the Project entity.
func (luo *LaunchpadUpdateOne) SetProject(p *Project) *LaunchpadUpdateOne {
	return luo.SetProjectID(p.ID)
}

// Mutation returns the LaunchpadMutation object of the builder.
func (luo *LaunchpadUpdateOne) Mutation() *LaunchpadMutation {
	return luo.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (luo *LaunchpadUpdateOne) ClearProject() *LaunchpadUpdateOne {
	luo.mutation.ClearProject()
	return luo
}

// Where appends a list predicates to the LaunchpadUpdate builder.
func (luo *LaunchpadUpdateOne) Where(ps ...predicate.Launchpad) *LaunchpadUpdateOne {
	luo.mutation.Where(ps...)
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LaunchpadUpdateOne) Select(field string, fields ...string) *LaunchpadUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Launchpad entity.
func (luo *LaunchpadUpdateOne) Save(ctx context.Context) (*Launchpad, error) {
	return withHooks(ctx, luo.sqlSave, luo.mutation, luo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LaunchpadUpdateOne) SaveX(ctx context.Context) *Launchpad {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LaunchpadUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LaunchpadUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (luo *LaunchpadUpdateOne) check() error {
	if _, ok := luo.mutation.ProjectID(); luo.mutation.ProjectCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Launchpad.project"`)
	}
	return nil
}

func (luo *LaunchpadUpdateOne) sqlSave(ctx context.Context) (_node *Launchpad, err error) {
	if err := luo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(launchpad.Table, launchpad.Columns, sqlgraph.NewFieldSpec(launchpad.FieldID, field.TypeInt))
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Launchpad.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, launchpad.FieldID)
		for _, f := range fields {
			if !launchpad.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != launchpad.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.IsReady(); ok {
		_spec.SetField(launchpad.FieldIsReady, field.TypeBool, value)
	}
	if value, ok := luo.mutation.MinterContract(); ok {
		_spec.SetField(launchpad.FieldMinterContract, field.TypeJSON, value)
	}
	if value, ok := luo.mutation.WhitelistedSaleOpen(); ok {
		_spec.SetField(launchpad.FieldWhitelistedSaleOpen, field.TypeBool, value)
	}
	if value, ok := luo.mutation.PublicSaleOpen(); ok {
		_spec.SetField(launchpad.FieldPublicSaleOpen, field.TypeBool, value)
	}
	if value, ok := luo.mutation.IsSoldOut(); ok {
		_spec.SetField(launchpad.FieldIsSoldOut, field.TypeBool, value)
	}
	if value, ok := luo.mutation.IsCanceled(); ok {
		_spec.SetField(launchpad.FieldIsCanceled, field.TypeBool, value)
	}
	if luo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   launchpad.ProjectTable,
			Columns: []string{launchpad.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   launchpad.ProjectTable,
			Columns: []string{launchpad.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Launchpad{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{launchpad.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luo.mutation.done = true
	return _node, nil
}
