// Code generated by ent, DO NOT EDIT.

package project

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the project type in the database.
	Label = "project"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldSlot holds the string denoting the slot field in the database.
	FieldSlot = "slot"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSlug holds the string denoting the slug field in the database.
	FieldSlug = "slug"
	// FieldValueDecimal holds the string denoting the value_decimal field in the database.
	FieldValueDecimal = "value_decimal"
	// FieldForecastedApr holds the string denoting the forecasted_apr field in the database.
	FieldForecastedApr = "forecasted_apr"
	// FieldTotalValue holds the string denoting the total_value field in the database.
	FieldTotalValue = "total_value"
	// FieldPaymentToken holds the string denoting the payment_token field in the database.
	FieldPaymentToken = "payment_token"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// EdgeMint holds the string denoting the mint edge name in mutations.
	EdgeMint = "mint"
	// EdgeLaunchpad holds the string denoting the launchpad edge name in mutations.
	EdgeLaunchpad = "launchpad"
	// Table holds the table name of the project in the database.
	Table = "projects"
	// MintTable is the table that holds the mint relation/edge.
	MintTable = "mints"
	// MintInverseTable is the table name for the Mint entity.
	// It exists in this package in order to avoid circular dependency with the "mint" package.
	MintInverseTable = "mints"
	// MintColumn is the table column denoting the mint relation/edge.
	MintColumn = "project_mint"
	// LaunchpadTable is the table that holds the launchpad relation/edge.
	LaunchpadTable = "launchpads"
	// LaunchpadInverseTable is the table name for the Launchpad entity.
	// It exists in this package in order to avoid circular dependency with the "launchpad" package.
	LaunchpadInverseTable = "launchpads"
	// LaunchpadColumn is the table column denoting the launchpad relation/edge.
	LaunchpadColumn = "project_launchpad"
)

// Columns holds all SQL columns for project fields.
var Columns = []string{
	FieldID,
	FieldAddress,
	FieldSlot,
	FieldName,
	FieldSlug,
	FieldValueDecimal,
	FieldForecastedApr,
	FieldTotalValue,
	FieldPaymentToken,
	FieldMetadata,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Project queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// BySlot orders the results by the slot field.
func BySlot(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSlot, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySlug orders the results by the slug field.
func BySlug(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSlug, opts...).ToFunc()
}

// ByValueDecimal orders the results by the value_decimal field.
func ByValueDecimal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValueDecimal, opts...).ToFunc()
}

// ByForecastedApr orders the results by the forecasted_apr field.
func ByForecastedApr(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldForecastedApr, opts...).ToFunc()
}

// ByTotalValue orders the results by the total_value field.
func ByTotalValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalValue, opts...).ToFunc()
}

// ByMintField orders the results by mint field.
func ByMintField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMintStep(), sql.OrderByField(field, opts...))
	}
}

// ByLaunchpadField orders the results by launchpad field.
func ByLaunchpadField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLaunchpadStep(), sql.OrderByField(field, opts...))
	}
}
func newMintStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MintInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, MintTable, MintColumn),
	)
}
func newLaunchpadStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LaunchpadInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, LaunchpadTable, LaunchpadColumn),
	)
}
